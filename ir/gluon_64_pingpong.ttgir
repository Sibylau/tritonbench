#blocked = #ttg.blocked<{sizePerThread = [1, 32], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 128], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 64], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 64, 2], threadsPerWarp = [32, 1, 1], warpsPerCTA = [4, 1, 1], order = [2, 0, 1]}>
#blocked6 = #ttg.blocked<{sizePerThread = [1, 2, 64], threadsPerWarp = [32, 1, 1], warpsPerCTA = [4, 1, 1], order = [1, 0, 2]}>
#blocked7 = #ttg.blocked<{sizePerThread = [1, 2, 64], threadsPerWarp = [32, 1, 1], warpsPerCTA = [4, 1, 1], order = [0, 2, 1]}>
#blocked8 = #ttg.blocked<{sizePerThread = [1, 64, 2], threadsPerWarp = [32, 1, 1], warpsPerCTA = [4, 1, 1], order = [0, 1, 2]}>
#blocked9 = #ttg.blocked<{sizePerThread = [1, 2, 32], threadsPerWarp = [32, 1, 1], warpsPerCTA = [4, 1, 1], order = [0, 2, 1]}>
#blocked10 = #ttg.blocked<{sizePerThread = [1, 32, 2], threadsPerWarp = [32, 1, 1], warpsPerCTA = [4, 1, 1], order = [0, 1, 2]}>
#blocked11 = #ttg.blocked<{sizePerThread = [1, 32, 2], threadsPerWarp = [32, 1, 1], warpsPerCTA = [4, 1, 1], order = [2, 0, 1]}>
#blocked12 = #ttg.blocked<{sizePerThread = [1, 2, 32], threadsPerWarp = [32, 1, 1], warpsPerCTA = [4, 1, 1], order = [1, 0, 2]}>
#linear = #ttg.linear<{register = [], lane = [[1], [2], [4], [8], [16]], warp = [[32], [64]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 64], [0, 1], [0, 2], [0, 4], [0, 8], [0, 16], [0, 32]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0]], warp = [[32, 0], [64, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 32], [0, 1], [0, 2], [0, 4], [0, 8], [0, 16]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0]], warp = [[32, 0], [64, 0]], block = []}>
#loc = loc(unknown)
#loc1 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1164:0)
#loc118 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":973:55)
#loc123 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":920:20)
#loc134 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":816:42)
#loc196 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":992:55)
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#shared1 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared2 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 16}>
#smem = #ttg.shared_memory
#tmem = #ttng.tensor_memory_encoding<blockM = 128, blockN = 64, unpacked = true>
#tmem1 = #ttng.tensor_memory_encoding<blockM = 128, blockN = 128, unpacked = true>
#tmem2 = #ttng.tensor_memory_encoding<blockM = 128, blockN = 1, unpacked = true>
#tmem3 = #ttng.tensor_memory_encoding<blockM = 128, blockN = 32, unpacked = true>
#tmem4 = #ttng.tensor_memory_encoding<blockM = 128, blockN = 128, unpacked = false>
#tmem5 = #ttng.tensor_memory_encoding<blockM = 128, blockN = 32, unpacked = false>
#loc297 = loc("sm_scale"(#loc1))
#loc298 = loc("M"(#loc1))
#loc299 = loc("Z"(#loc1))
#loc300 = loc("H"(#loc1))
#loc301 = loc("N_CTX"(#loc1))
#loc302 = loc("desc_q"(#loc1))
#loc303 = loc("desc_k"(#loc1))
#loc304 = loc("desc_v"(#loc1))
#loc305 = loc("desc_o"(#loc1))
#loc422 = loc(callsite(#loc123 at #loc118))
#loc429 = loc("m_ij"(#loc134))
#loc469 = loc(callsite(#loc123 at #loc196))
#loc730 = loc(callsite(#loc429 at #loc422))
#loc753 = loc(callsite(#loc at #loc422))
#loc773 = loc(callsite(#loc429 at #loc469))
#loc796 = loc(callsite(#loc at #loc469))
#loc1060 = loc(callsite(#loc at #loc730))
#loc1105 = loc(callsite(#loc at #loc773))
module attributes {ttg.maxnreg = 128 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:100", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @gluon_attention(%sm_scale: f32 loc("sm_scale"(#loc1)), %M: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("M"(#loc1)), %Z: i32 loc("Z"(#loc1)), %H: i32 {tt.divisibility = 16 : i32} loc("H"(#loc1)), %N_CTX: i32 {tt.divisibility = 16 : i32} loc("N_CTX"(#loc1)), %desc_q: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc("desc_q"(#loc1)), %desc_q_0: i32 loc("desc_q"(#loc1)), %desc_q_1: i32 loc("desc_q"(#loc1)), %desc_q_2: i64 loc("desc_q"(#loc1)), %desc_q_3: i64 loc("desc_q"(#loc1)), %desc_k: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc("desc_k"(#loc1)), %desc_k_4: i32 loc("desc_k"(#loc1)), %desc_k_5: i32 loc("desc_k"(#loc1)), %desc_k_6: i64 loc("desc_k"(#loc1)), %desc_k_7: i64 loc("desc_k"(#loc1)), %desc_v: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc("desc_v"(#loc1)), %desc_v_8: i32 loc("desc_v"(#loc1)), %desc_v_9: i32 loc("desc_v"(#loc1)), %desc_v_10: i64 loc("desc_v"(#loc1)), %desc_v_11: i64 loc("desc_v"(#loc1)), %desc_o: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc("desc_o"(#loc1)), %desc_o_12: i32 loc("desc_o"(#loc1)), %desc_o_13: i32 loc("desc_o"(#loc1)), %desc_o_14: i64 loc("desc_o"(#loc1)), %desc_o_15: i64 loc("desc_o"(#loc1))) attributes {noinline = false} {
    %cst = arith.constant 1.44269502 : f32 loc(#loc)
    %c1_i32 = arith.constant 1 : i32 loc(#loc)
    %true = arith.constant true loc(#loc)
    %c0_i32 = arith.constant 0 : i32 loc(#loc)
    %c5_i32 = arith.constant 5 : i32 loc(#loc)
    %c4_i32 = arith.constant 4 : i32 loc(#loc)
    %c3_i32 = arith.constant 3 : i32 loc(#loc)
    %c2_i32 = arith.constant 2 : i32 loc(#loc)
    %cst_16 = arith.constant dense<1.000000e+00> : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c255_i32 = arith.constant 255 : i32 loc(#loc)
    %c148_i32 = arith.constant 148 : i32 loc(#loc)
    %c128_i32 = arith.constant 128 : i32 loc(#loc)
    %qk_scale = arith.mulf %sm_scale, %cst : f32 loc(#loc306)
    %mem = ttg.local_alloc : () -> !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(#loc972)
    %ready_bars = ttg.local_alloc : () -> !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(#loc973)
    %empty_bars = ttg.local_alloc : () -> !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(#loc974)
    %q_chnl = ttg.memdesc_index %ready_bars[%c0_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc975)
    ttng.init_barrier %q_chnl, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc976)
    %q_chnl_17 = ttg.memdesc_index %empty_bars[%c0_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc977)
    ttng.init_barrier %q_chnl_17, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc978)
    ttng.arrive_barrier %q_chnl_17, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc979)
    %q_chnl_18 = ttg.memdesc_index %ready_bars[%c1_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc975)
    ttng.init_barrier %q_chnl_18, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc976)
    %q_chnl_19 = ttg.memdesc_index %empty_bars[%c1_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc977)
    ttng.init_barrier %q_chnl_19, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc978)
    ttng.arrive_barrier %q_chnl_19, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc979)
    %mem_20 = ttg.local_alloc : () -> !ttg.memdesc<6x128x64xbf16, #shared, #smem, mutable> loc(#loc980)
    %ready_bars_21 = ttg.local_alloc : () -> !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> loc(#loc981)
    %empty_bars_22 = ttg.local_alloc : () -> !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> loc(#loc982)
    %kv_chnl = ttg.memdesc_index %ready_bars_21[%c0_i32] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc983)
    ttng.init_barrier %kv_chnl, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc984)
    %kv_chnl_23 = ttg.memdesc_index %empty_bars_22[%c0_i32] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc985)
    ttng.init_barrier %kv_chnl_23, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc986)
    ttng.arrive_barrier %kv_chnl_23, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc987)
    %kv_chnl_24 = ttg.memdesc_index %ready_bars_21[%c1_i32] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc983)
    ttng.init_barrier %kv_chnl_24, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc984)
    %kv_chnl_25 = ttg.memdesc_index %empty_bars_22[%c1_i32] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc985)
    ttng.init_barrier %kv_chnl_25, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc986)
    ttng.arrive_barrier %kv_chnl_25, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc987)
    %kv_chnl_26 = ttg.memdesc_index %ready_bars_21[%c2_i32] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc983)
    ttng.init_barrier %kv_chnl_26, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc984)
    %kv_chnl_27 = ttg.memdesc_index %empty_bars_22[%c2_i32] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc985)
    ttng.init_barrier %kv_chnl_27, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc986)
    ttng.arrive_barrier %kv_chnl_27, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc987)
    %kv_chnl_28 = ttg.memdesc_index %ready_bars_21[%c3_i32] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc983)
    ttng.init_barrier %kv_chnl_28, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc984)
    %kv_chnl_29 = ttg.memdesc_index %empty_bars_22[%c3_i32] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc985)
    ttng.init_barrier %kv_chnl_29, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc986)
    ttng.arrive_barrier %kv_chnl_29, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc987)
    %kv_chnl_30 = ttg.memdesc_index %ready_bars_21[%c4_i32] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc983)
    ttng.init_barrier %kv_chnl_30, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc984)
    %kv_chnl_31 = ttg.memdesc_index %empty_bars_22[%c4_i32] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc985)
    ttng.init_barrier %kv_chnl_31, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc986)
    ttng.arrive_barrier %kv_chnl_31, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc987)
    %kv_chnl_32 = ttg.memdesc_index %ready_bars_21[%c5_i32] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc983)
    ttng.init_barrier %kv_chnl_32, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc984)
    %kv_chnl_33 = ttg.memdesc_index %empty_bars_22[%c5_i32] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc985)
    ttng.init_barrier %kv_chnl_33, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc986)
    ttng.arrive_barrier %kv_chnl_33, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc987)
    %mem_34 = ttng.tmem_alloc : () -> !ttg.memdesc<2x128x64xf32, #tmem, #ttng.tensor_memory, mutable> loc(#loc574)
    %ready_bars_35 = ttg.local_alloc : () -> !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(#loc575)
    %empty_bars_36 = ttg.local_alloc : () -> !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(#loc576)
    %o_chnl = ttg.memdesc_index %ready_bars_35[%c0_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc577)
    ttng.init_barrier %o_chnl, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc578)
    %o_chnl_37 = ttg.memdesc_index %empty_bars_36[%c0_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc579)
    ttng.init_barrier %o_chnl_37, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc580)
    ttng.arrive_barrier %o_chnl_37, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc581)
    %o_chnl_38 = ttg.memdesc_index %ready_bars_35[%c1_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc577)
    ttng.init_barrier %o_chnl_38, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc578)
    %o_chnl_39 = ttg.memdesc_index %empty_bars_36[%c1_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc579)
    ttng.init_barrier %o_chnl_39, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc580)
    ttng.arrive_barrier %o_chnl_39, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc581)
    %mem_40 = ttg.local_alloc : () -> !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(#loc582)
    %ready_bars_41 = ttg.local_alloc : () -> !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(#loc583)
    %empty_bars_42 = ttg.local_alloc : () -> !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(#loc584)
    %epi_chnl = ttg.memdesc_index %ready_bars_41[%c0_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc585)
    ttng.init_barrier %epi_chnl, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc586)
    %epi_chnl_43 = ttg.memdesc_index %empty_bars_42[%c0_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc587)
    ttng.init_barrier %epi_chnl_43, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc588)
    ttng.arrive_barrier %epi_chnl_43, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc589)
    %epi_chnl_44 = ttg.memdesc_index %ready_bars_41[%c1_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc585)
    ttng.init_barrier %epi_chnl_44, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc586)
    %epi_chnl_45 = ttg.memdesc_index %empty_bars_42[%c1_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc587)
    ttng.init_barrier %epi_chnl_45, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc588)
    ttng.arrive_barrier %epi_chnl_45, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc589)
    %mem_46 = ttng.tmem_alloc : () -> !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> loc(#loc590)
    %ready_bars_47 = ttg.local_alloc : () -> !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(#loc591)
    %empty_bars_48 = ttg.local_alloc : () -> !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(#loc592)
    %s0_chnl = ttg.memdesc_index %ready_bars_47[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc593)
    ttng.init_barrier %s0_chnl, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc594)
    %s0_chnl_49 = ttg.memdesc_index %empty_bars_48[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc595)
    ttng.init_barrier %s0_chnl_49, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc596)
    ttng.arrive_barrier %s0_chnl_49, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc597)
    %mem_50 = ttng.tmem_alloc : () -> !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> loc(#loc598)
    %ready_bars_51 = ttg.local_alloc : () -> !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(#loc599)
    %empty_bars_52 = ttg.local_alloc : () -> !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(#loc600)
    %s1_chnl = ttg.memdesc_index %ready_bars_51[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc601)
    ttng.init_barrier %s1_chnl, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc602)
    %s1_chnl_53 = ttg.memdesc_index %empty_bars_52[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc603)
    ttng.init_barrier %s1_chnl_53, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc604)
    ttng.arrive_barrier %s1_chnl_53, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc605)
    %mem_54 = ttg.local_alloc : () -> !ttg.memdesc<1x1xi8, #shared1, #smem, mutable> loc(#loc606)
    %ready_bars_55 = ttg.local_alloc : () -> !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(#loc607)
    %empty_bars_56 = ttg.local_alloc : () -> !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(#loc608)
    %c0_chnl = ttg.memdesc_index %ready_bars_55[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc609)
    ttng.init_barrier %c0_chnl, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc610)
    %c0_chnl_57 = ttg.memdesc_index %empty_bars_56[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc611)
    ttng.init_barrier %c0_chnl_57, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc612)
    ttng.arrive_barrier %c0_chnl_57, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc613)
    %mem_58 = ttg.local_alloc : () -> !ttg.memdesc<1x1xi8, #shared1, #smem, mutable> loc(#loc614)
    %ready_bars_59 = ttg.local_alloc : () -> !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(#loc615)
    %empty_bars_60 = ttg.local_alloc : () -> !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(#loc616)
    %c1_chnl = ttg.memdesc_index %ready_bars_59[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc617)
    ttng.init_barrier %c1_chnl, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc618)
    %c1_chnl_61 = ttg.memdesc_index %empty_bars_60[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc619)
    ttng.init_barrier %c1_chnl_61, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc620)
    ttng.arrive_barrier %c1_chnl_61, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc621)
    %mem_62 = ttg.local_alloc : () -> !ttg.memdesc<1x1xi8, #shared1, #smem, mutable> loc(#loc622)
    %ready_bars_63 = ttg.local_alloc : () -> !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(#loc623)
    %empty_bars_64 = ttg.local_alloc : () -> !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(#loc624)
    %exp_turnstile = ttg.memdesc_index %ready_bars_63[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc625)
    ttng.init_barrier %exp_turnstile, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc626)
    %exp_turnstile_65 = ttg.memdesc_index %empty_bars_64[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc627)
    ttng.init_barrier %exp_turnstile_65, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc628)
    ttng.arrive_barrier %exp_turnstile_65, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc629)
    ttg.warp_specialize(%qk_scale, %Z, %H, %N_CTX, %mem, %ready_bars, %empty_bars, %mem_20, %ready_bars_21, %empty_bars_22, %mem_34, %ready_bars_35, %empty_bars_36, %mem_40, %ready_bars_41, %empty_bars_42, %mem_46, %ready_bars_47, %empty_bars_48, %mem_50, %ready_bars_51, %empty_bars_52, %ready_bars_55, %empty_bars_56, %ready_bars_59, %empty_bars_60, %ready_bars_63, %empty_bars_64, %desc_q, %desc_k, %desc_v, %desc_o) attributes {requestedRegisters = array<i32: 192, 192, 24, 24, 24>}
    default {
      %s0_tmem = ttg.memdesc_index %mem_46[%c0_i32] : !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc319)
      %s1_tmem = ttg.memdesc_index %mem_50[%c0_i32] : !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc320)
      %start_pid = tt.get_program_id x : i32 loc(#loc630)
      %num_pid_m = arith.addi %N_CTX, %c255_i32 : i32 loc(#loc988)
      %num_pid_m_66 = arith.divsi %num_pid_m, %c256_i32 : i32 loc(#loc989)
      %num_pid_n = arith.muli %Z, %H : i32 loc(#loc632)
      %num_tiles = arith.muli %num_pid_m_66, %num_pid_n : i32 loc(#loc633)
      %epi_producer:4 = scf.for %epi_producer_67 = %start_pid to %num_tiles step %c148_i32 iter_args(%arg26 = %c0_i32, %arg27 = %c0_i32, %arg28 = %c0_i32, %arg29 = %c0_i32) -> (i32, i32, i32, i32)  : i32 {
        %group_id = arith.divsi %epi_producer_67, %num_pid_m_66 : i32 loc(#loc635)
        %group_size_n = arith.subi %num_pid_n, %group_id : i32 loc(#loc636)
        %group_size_n_68 = arith.minsi %group_size_n, %c1_i32 : i32 loc(#loc637)
        %pid_n = arith.remsi %epi_producer_67, %group_size_n_68 : i32 loc(#loc638)
        %pid_n_69 = arith.addi %group_id, %pid_n : i32 loc(#loc639)
        %pid_m = arith.remsi %epi_producer_67, %num_pid_m_66 : i32 loc(#loc640)
        %pid_m_70 = arith.divsi %pid_m, %group_size_n_68 : i32 loc(#loc641)
        %num_corrections = arith.divsi %N_CTX, %c128_i32 : i32 loc(#loc335)
        %ready_bar = ttg.memdesc_index %ready_bars_55[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc642)
        %empty_bar = ttg.memdesc_index %empty_bars_56[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc643)
        ttng.wait_barrier %ready_bar, %arg26, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc644)
        %next = arith.xori %arg26, %c1_i32 : i32 loc(#loc991)
        ttng.arrive_barrier %empty_bar, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc47)
        %ready_bar_71 = ttg.memdesc_index %ready_bars_59[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc646)
        %empty_bar_72 = ttg.memdesc_index %empty_bars_60[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc647)
        ttng.wait_barrier %ready_bar_71, %arg27, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc648)
        %next_73 = arith.xori %arg27, %c1_i32 : i32 loc(#loc992)
        ttng.arrive_barrier %empty_bar_72, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc49)
        %0 = arith.subi %num_corrections, %c1_i32 : i32 loc(#loc50)
        %o_consumer:3 = scf.for %o_consumer_128 = %c0_i32 to %0 step %c1_i32 iter_args(%next_129 = %next, %next_130 = %next_73, %o_consumer_131 = %arg28) -> (i32, i32, i32)  : i32 {
          %mem_132 = ttg.memdesc_index %mem_34[%c0_i32] : !ttg.memdesc<2x128x64xf32, #tmem, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc994)
          %ready_bar_133 = ttg.memdesc_index %ready_bars_35[%c0_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc995)
          %empty_bar_134 = ttg.memdesc_index %empty_bars_36[%c0_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc996)
          ttng.wait_barrier %ready_bar_133, %o_consumer_131, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc997)
          %ready_bar_135 = ttg.memdesc_index %ready_bars_55[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc998)
          %empty_bar_136 = ttg.memdesc_index %empty_bars_56[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc999)
          ttng.wait_barrier %ready_bar_135, %next_129, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1000)
          %next_137 = arith.xori %next_129, %c1_i32 : i32 loc(#loc1001)
          %alpha_tmem = ttng.tmem_subslice %s0_tmem {N = 64 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc1002)
          %alpha = ttg.memdesc_reinterpret %alpha_tmem : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc1003)
          %alpha_138 = ttng.tmem_load %alpha : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> -> tensor<128x1xf32, #blocked1> loc(#loc655)
          ttng.arrive_barrier %empty_bar_136, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc348)
          %alpha_139 = tt.reshape %alpha_138 : tensor<128x1xf32, #blocked1> -> tensor<128xf32, #linear> loc(#loc656)
          %alpha_140 = ttg.convert_layout %alpha_139 : tensor<128xf32, #linear> -> tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc657)
          %o_ref_141 = ttng.tmem_subslice %mem_132 {N = 0 : i32} : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> -> !ttg.memdesc<128x32xf32, #tmem3, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc658)
          %o_142 = ttng.tmem_load %o_ref_141 : !ttg.memdesc<128x32xf32, #tmem3, #ttng.tensor_memory, mutable, 2x128x64> -> tensor<128x32xf32, #blocked> loc(#loc659)
          %o_143 = tt.expand_dims %alpha_140 {axis = 1 : i32} : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xf32, #blocked> loc(#loc660)
          %o_144 = tt.broadcast %o_143 : tensor<128x1xf32, #blocked> -> tensor<128x32xf32, #blocked> loc(#loc1004)
          %o_145 = tt.elementwise_inline_asm "\0A        {\0A            .reg .b64 ra, rb, rc;\0A            mov.b64 ra, { $2, $3 };\0A            mov.b64 rb, { $4, $5 };\0A            mul.f32x2 rc, ra, rb;\0A            mov.b64 { $0, $1 }, rc;\0A        }\0A        " {constraints = "=r,=r,r,r,r,r", packed_element = 2 : i32, pure = true} %o_142, %o_144 : tensor<128x32xf32, #blocked>, tensor<128x32xf32, #blocked> -> tensor<128x32xf32, #blocked> loc(#loc1004)
          ttng.tmem_store %o_145, %o_ref_141, %true : tensor<128x32xf32, #blocked> -> !ttg.memdesc<128x32xf32, #tmem3, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc355)
          %o_ref_146 = ttng.tmem_subslice %mem_132 {N = 32 : i32} : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> -> !ttg.memdesc<128x32xf32, #tmem3, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc658)
          %o_147 = ttng.tmem_load %o_ref_146 : !ttg.memdesc<128x32xf32, #tmem3, #ttng.tensor_memory, mutable, 2x128x64> -> tensor<128x32xf32, #blocked> loc(#loc659)
          %o_148 = tt.elementwise_inline_asm "\0A        {\0A            .reg .b64 ra, rb, rc;\0A            mov.b64 ra, { $2, $3 };\0A            mov.b64 rb, { $4, $5 };\0A            mul.f32x2 rc, ra, rb;\0A            mov.b64 { $0, $1 }, rc;\0A        }\0A        " {constraints = "=r,=r,r,r,r,r", packed_element = 2 : i32, pure = true} %o_147, %o_144 : tensor<128x32xf32, #blocked>, tensor<128x32xf32, #blocked> -> tensor<128x32xf32, #blocked> loc(#loc1004)
          ttng.tmem_store %o_148, %o_ref_146, %true : tensor<128x32xf32, #blocked> -> !ttg.memdesc<128x32xf32, #tmem3, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc355)
          ttng.arrive_barrier %empty_bar_134, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc356)
          %mem_149 = ttg.memdesc_index %mem_34[%c1_i32] : !ttg.memdesc<2x128x64xf32, #tmem, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc1005)
          %ready_bar_150 = ttg.memdesc_index %ready_bars_35[%c1_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc1006)
          %empty_bar_151 = ttg.memdesc_index %empty_bars_36[%c1_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc1007)
          ttng.wait_barrier %ready_bar_150, %o_consumer_131, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc1008)
          %phase_152 = arith.xori %o_consumer_131, %c1_i32 : i32 loc(#loc1009)
          %ready_bar_153 = ttg.memdesc_index %ready_bars_59[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1010)
          %empty_bar_154 = ttg.memdesc_index %empty_bars_60[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1011)
          ttng.wait_barrier %ready_bar_153, %next_130, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1012)
          %next_155 = arith.xori %next_130, %c1_i32 : i32 loc(#loc1013)
          %alpha_tmem_156 = ttng.tmem_subslice %s1_tmem {N = 64 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc1014)
          %alpha_157 = ttg.memdesc_reinterpret %alpha_tmem_156 : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc1015)
          %alpha_158 = ttng.tmem_load %alpha_157 : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> -> tensor<128x1xf32, #blocked1> loc(#loc667)
          ttng.arrive_barrier %empty_bar_154, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc360)
          %alpha_159 = tt.reshape %alpha_158 : tensor<128x1xf32, #blocked1> -> tensor<128xf32, #linear> loc(#loc668)
          %alpha_160 = ttg.convert_layout %alpha_159 : tensor<128xf32, #linear> -> tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc669)
          %o_ref_161 = ttng.tmem_subslice %mem_149 {N = 0 : i32} : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> -> !ttg.memdesc<128x32xf32, #tmem3, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc670)
          %o_162 = ttng.tmem_load %o_ref_161 : !ttg.memdesc<128x32xf32, #tmem3, #ttng.tensor_memory, mutable, 2x128x64> -> tensor<128x32xf32, #blocked> loc(#loc671)
          %o_163 = tt.expand_dims %alpha_160 {axis = 1 : i32} : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xf32, #blocked> loc(#loc672)
          %o_164 = tt.broadcast %o_163 : tensor<128x1xf32, #blocked> -> tensor<128x32xf32, #blocked> loc(#loc1016)
          %o_165 = tt.elementwise_inline_asm "\0A        {\0A            .reg .b64 ra, rb, rc;\0A            mov.b64 ra, { $2, $3 };\0A            mov.b64 rb, { $4, $5 };\0A            mul.f32x2 rc, ra, rb;\0A            mov.b64 { $0, $1 }, rc;\0A        }\0A        " {constraints = "=r,=r,r,r,r,r", packed_element = 2 : i32, pure = true} %o_162, %o_164 : tensor<128x32xf32, #blocked>, tensor<128x32xf32, #blocked> -> tensor<128x32xf32, #blocked> loc(#loc1016)
          ttng.tmem_store %o_165, %o_ref_161, %true : tensor<128x32xf32, #blocked> -> !ttg.memdesc<128x32xf32, #tmem3, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc361)
          %o_ref_166 = ttng.tmem_subslice %mem_149 {N = 32 : i32} : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> -> !ttg.memdesc<128x32xf32, #tmem3, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc670)
          %o_167 = ttng.tmem_load %o_ref_166 : !ttg.memdesc<128x32xf32, #tmem3, #ttng.tensor_memory, mutable, 2x128x64> -> tensor<128x32xf32, #blocked> loc(#loc671)
          %o_168 = tt.elementwise_inline_asm "\0A        {\0A            .reg .b64 ra, rb, rc;\0A            mov.b64 ra, { $2, $3 };\0A            mov.b64 rb, { $4, $5 };\0A            mul.f32x2 rc, ra, rb;\0A            mov.b64 { $0, $1 }, rc;\0A        }\0A        " {constraints = "=r,=r,r,r,r,r", packed_element = 2 : i32, pure = true} %o_167, %o_164 : tensor<128x32xf32, #blocked>, tensor<128x32xf32, #blocked> -> tensor<128x32xf32, #blocked> loc(#loc1016)
          ttng.tmem_store %o_168, %o_ref_166, %true : tensor<128x32xf32, #blocked> -> !ttg.memdesc<128x32xf32, #tmem3, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc361)
          ttng.arrive_barrier %empty_bar_151, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc362)
          scf.yield %next_137, %next_155, %phase_152 : i32, i32, i32 loc(#loc72)
        } loc(#loc1444)
        %ready_bar_74 = ttg.memdesc_index %ready_bars_55[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1017)
        %empty_bar_75 = ttg.memdesc_index %empty_bars_56[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1018)
        ttng.wait_barrier %ready_bar_74, %o_consumer#0, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1019)
        %next_76 = arith.xori %o_consumer#0, %c1_i32 : i32 loc(#loc1020)
        %m_i_tmem = ttng.tmem_subslice %s0_tmem {N = 65 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc676)
        %l_i_tmem = ttng.tmem_subslice %s0_tmem {N = 66 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc677)
        %m_i_tmem_77 = ttg.memdesc_reinterpret %m_i_tmem : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc678)
        %l_i_tmem_78 = ttg.memdesc_reinterpret %l_i_tmem : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc679)
        %m_i = ttng.tmem_load %m_i_tmem_77 : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> -> tensor<128x1xf32, #blocked1> loc(#loc680)
        %m_i_79 = tt.reshape %m_i : tensor<128x1xf32, #blocked1> -> tensor<128xf32, #linear> loc(#loc681)
        %m_i_80 = ttg.convert_layout %m_i_79 : tensor<128xf32, #linear> -> tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc682)
        %l_i = ttng.tmem_load %l_i_tmem_78 : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> -> tensor<128x1xf32, #blocked1> loc(#loc683)
        %l_i_81 = tt.reshape %l_i : tensor<128x1xf32, #blocked1> -> tensor<128xf32, #linear> loc(#loc684)
        %l_i_82 = ttg.convert_layout %l_i_81 : tensor<128xf32, #linear> -> tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc685)
        ttng.arrive_barrier %empty_bar_75, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc375)
        %mem_83 = ttg.memdesc_index %mem_40[%c0_i32] : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc1021)
        %ready_bar_84 = ttg.memdesc_index %ready_bars_41[%c0_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc1022)
        %empty_bar_85 = ttg.memdesc_index %empty_bars_42[%c0_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc1023)
        ttng.wait_barrier %empty_bar_85, %arg29, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc1024)
        %mem_86 = ttg.memdesc_index %mem_34[%c0_i32] : !ttg.memdesc<2x128x64xf32, #tmem, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc1025)
        %ready_bar_87 = ttg.memdesc_index %ready_bars_35[%c0_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc1026)
        %empty_bar_88 = ttg.memdesc_index %empty_bars_36[%c0_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc1027)
        ttng.wait_barrier %ready_bar_87, %o_consumer#2, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc1028)
        %scale = arith.divf %cst_16, %l_i_82 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc688)
        %o_ref = ttng.tmem_subslice %mem_86 {N = 0 : i32} : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc689)
        %o = ttng.tmem_load %o_ref : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> -> tensor<128x64xf32, #blocked> loc(#loc690)
        %o_89 = tt.expand_dims %scale {axis = 1 : i32} : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xf32, #blocked> loc(#loc691)
        %o_90 = tt.broadcast %o_89 : tensor<128x1xf32, #blocked> -> tensor<128x64xf32, #blocked> loc(#loc1029)
        %o_91 = tt.elementwise_inline_asm "\0A        {\0A            .reg .b64 ra, rb, rc;\0A            mov.b64 ra, { $2, $3 };\0A            mov.b64 rb, { $4, $5 };\0A            mul.f32x2 rc, ra, rb;\0A            mov.b64 { $0, $1 }, rc;\0A        }\0A        " {constraints = "=r,=r,r,r,r,r", packed_element = 2 : i32, pure = true} %o, %o_90 : tensor<128x64xf32, #blocked>, tensor<128x64xf32, #blocked> -> tensor<128x64xf32, #blocked> loc(#loc1029)
        %1 = ttg.memdesc_subslice %mem_83[0, 0] : !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc386)
        %2 = arith.truncf %o_91 : tensor<128x64xf32, #blocked> to tensor<128x64xbf16, #blocked> loc(#loc387)
        ttg.local_store %2, %1 : tensor<128x64xbf16, #blocked> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc388)
        ttng.fence_async_shared {bCluster = false} loc(#loc389)
        ttng.arrive_barrier %ready_bar_84, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc390)
        ttng.arrive_barrier %empty_bar_88, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc391)
        %m_i_92 = math.log2 %l_i_82 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc693)
        %m_i_93 = arith.addf %m_i_80, %m_i_92 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc694)
        %offs_m = arith.muli %pid_m_70, %c256_i32 : i32 loc(#loc695)
        %offs_m_94 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked2> loc(#loc696)
        %offs_m_95 = tt.splat %offs_m : i32 -> tensor<128xi32, #blocked2> loc(#loc697)
        %offs_m_96 = arith.addi %offs_m_95, %offs_m_94 : tensor<128xi32, #blocked2> loc(#loc697)
        %m_ptrs = arith.muli %pid_n_69, %N_CTX : i32 loc(#loc698)
        %m_ptrs_97 = tt.addptr %M, %m_ptrs : !tt.ptr<f32>, i32 loc(#loc699)
        %m_ptrs_98 = tt.splat %m_ptrs_97 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked2> loc(#loc700)
        %m_ptrs_99 = tt.addptr %m_ptrs_98, %offs_m_96 : tensor<128x!tt.ptr<f32>, #blocked2>, tensor<128xi32, #blocked2> loc(#loc700)
        %3 = ttg.convert_layout %m_i_93 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128xf32, #blocked2> loc(#loc400)
        tt.store %m_ptrs_99, %3 : tensor<128x!tt.ptr<f32>, #blocked2> loc(#loc401)
        %ready_bar_100 = ttg.memdesc_index %ready_bars_59[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1030)
        %empty_bar_101 = ttg.memdesc_index %empty_bars_60[%c0_i32] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1031)
        ttng.wait_barrier %ready_bar_100, %o_consumer#1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1032)
        %next_102 = arith.xori %o_consumer#1, %c1_i32 : i32 loc(#loc1033)
        %m_i_tmem_103 = ttng.tmem_subslice %s1_tmem {N = 65 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc703)
        %l_i_tmem_104 = ttng.tmem_subslice %s1_tmem {N = 66 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc704)
        %m_i_tmem_105 = ttg.memdesc_reinterpret %m_i_tmem_103 : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc705)
        %l_i_tmem_106 = ttg.memdesc_reinterpret %l_i_tmem_104 : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc706)
        %m_i_107 = ttng.tmem_load %m_i_tmem_105 : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> -> tensor<128x1xf32, #blocked1> loc(#loc707)
        %m_i_108 = tt.reshape %m_i_107 : tensor<128x1xf32, #blocked1> -> tensor<128xf32, #linear> loc(#loc708)
        %m_i_109 = ttg.convert_layout %m_i_108 : tensor<128xf32, #linear> -> tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc709)
        %l_i_110 = ttng.tmem_load %l_i_tmem_106 : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> -> tensor<128x1xf32, #blocked1> loc(#loc710)
        %l_i_111 = tt.reshape %l_i_110 : tensor<128x1xf32, #blocked1> -> tensor<128xf32, #linear> loc(#loc711)
        %l_i_112 = ttg.convert_layout %l_i_111 : tensor<128xf32, #linear> -> tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc712)
        ttng.arrive_barrier %empty_bar_101, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc404)
        %mem_113 = ttg.memdesc_index %mem_40[%c1_i32] : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc1034)
        %ready_bar_114 = ttg.memdesc_index %ready_bars_41[%c1_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc1035)
        %empty_bar_115 = ttg.memdesc_index %empty_bars_42[%c1_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc1036)
        ttng.wait_barrier %empty_bar_115, %arg29, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc1037)
        %phase = arith.xori %arg29, %c1_i32 : i32 loc(#loc1038)
        %mem_116 = ttg.memdesc_index %mem_34[%c1_i32] : !ttg.memdesc<2x128x64xf32, #tmem, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc1039)
        %ready_bar_117 = ttg.memdesc_index %ready_bars_35[%c1_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc1040)
        %empty_bar_118 = ttg.memdesc_index %empty_bars_36[%c1_i32] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc1041)
        ttng.wait_barrier %ready_bar_117, %o_consumer#2, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc1042)
        %phase_119 = arith.xori %o_consumer#2, %c1_i32 : i32 loc(#loc1043)
        %scale_120 = arith.divf %cst_16, %l_i_112 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc717)
        %o_ref_121 = ttng.tmem_subslice %mem_116 {N = 0 : i32} : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc718)
        %o_122 = ttng.tmem_load %o_ref_121 : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> -> tensor<128x64xf32, #blocked> loc(#loc719)
        %o_123 = tt.expand_dims %scale_120 {axis = 1 : i32} : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xf32, #blocked> loc(#loc720)
        %o_124 = tt.broadcast %o_123 : tensor<128x1xf32, #blocked> -> tensor<128x64xf32, #blocked> loc(#loc1044)
        %o_125 = tt.elementwise_inline_asm "\0A        {\0A            .reg .b64 ra, rb, rc;\0A            mov.b64 ra, { $2, $3 };\0A            mov.b64 rb, { $4, $5 };\0A            mul.f32x2 rc, ra, rb;\0A            mov.b64 { $0, $1 }, rc;\0A        }\0A        " {constraints = "=r,=r,r,r,r,r", packed_element = 2 : i32, pure = true} %o_122, %o_124 : tensor<128x64xf32, #blocked>, tensor<128x64xf32, #blocked> -> tensor<128x64xf32, #blocked> loc(#loc1044)
        %4 = ttg.memdesc_subslice %mem_113[0, 0] : !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc408)
        %5 = arith.truncf %o_125 : tensor<128x64xf32, #blocked> to tensor<128x64xbf16, #blocked> loc(#loc409)
        ttg.local_store %5, %4 : tensor<128x64xbf16, #blocked> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc410)
        ttng.fence_async_shared {bCluster = false} loc(#loc411)
        ttng.arrive_barrier %ready_bar_114, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc412)
        ttng.arrive_barrier %empty_bar_118, 1, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc413)
        %m_i_126 = math.log2 %l_i_112 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc722)
        %m_i_127 = arith.addf %m_i_109, %m_i_126 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc723)
        %6 = ttg.convert_layout %m_i_127 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128xf32, #blocked2> loc(#loc414)
        tt.store %m_ptrs_99, %6 : tensor<128x!tt.ptr<f32>, #blocked2> loc(#loc415)
        scf.yield %next_76, %next_102, %phase_119, %phase : i32, i32, i32, i32 loc(#loc117)
      } loc(#loc1469)
      ttg.warp_yield loc(#loc)
    }
    partition0(%arg25: f32 loc(unknown), %arg26: i32 loc(unknown), %arg27: i32 loc(unknown), %arg28: i32 loc(unknown), %arg29: !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(unknown), %arg30: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg31: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg32: !ttg.memdesc<6x128x64xbf16, #shared, #smem, mutable> loc(unknown), %arg33: !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> loc(unknown), %arg34: !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> loc(unknown), %arg35: !ttg.memdesc<2x128x64xf32, #tmem, #ttng.tensor_memory, mutable> loc(unknown), %arg36: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg37: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg38: !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(unknown), %arg39: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg40: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg41: !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> loc(unknown), %arg42: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg43: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg44: !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> loc(unknown), %arg45: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg46: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg47: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg48: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg49: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg50: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg51: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg52: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg53: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown), %arg54: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown), %arg55: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown), %arg56: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown)) num_warps(4) {
      %c0_i32_66 = arith.constant 0 : i32 loc(#loc)
      %cst_67 = arith.constant dense<0.000000e+00> : tensor<128x1xf32, #blocked3> loc(#loc416)
      %c128_i32_68 = arith.constant 128 : i32 loc(#loc416)
      %num_pid_m = arith.constant 255 : i32 loc(#loc1261)
      %c148_i32_69 = arith.constant 148 : i32 loc(#loc418)
      %true_70 = arith.constant true loc(#loc416)
      %cst_71 = arith.constant dense<0.000000e+00> : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc416)
      %cst_72 = arith.constant dense<0xFF800000> : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc416)
      %c256_i32_73 = arith.constant 256 : i32 loc(#loc416)
      %c1_i32_74 = arith.constant 1 : i32 loc(#loc416)
      %ready_bar = ttg.memdesc_index %arg47[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1046)
      %empty_bar = ttg.memdesc_index %arg48[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1047)
      ttng.wait_barrier %empty_bar, %c0_i32_66, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1048)
      %start_pid = tt.get_program_id x : i32 loc(#loc1049)
      %num_pid_m_75 = arith.addi %arg28, %num_pid_m : i32 loc(#loc1261)
      %num_pid_m_76 = arith.divsi %num_pid_m_75, %c256_i32_73 : i32 loc(#loc1262)
      %num_pid_n = arith.muli %arg26, %arg27 : i32 loc(#loc1050)
      %num_tiles = arith.muli %num_pid_m_76, %num_pid_n : i32 loc(#loc1051)
      %corr_bar:5 = scf.for %corr_bar_77 = %start_pid to %num_tiles step %c148_i32_69 iter_args(%arg58 = %c0_i32_66, %arg59 = %c0_i32_66, %arg60 = %c0_i32_66, %arg61 = %c1_i32_74, %ready_bar_78 = %ready_bar) -> (i32, i32, i32, i32, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1>)  : i32 {
        %l_i1:8 = scf.for %l_i1_87 = %c0_i32_66 to %arg28 step %c128_i32_68 iter_args(%arg64 = %arg60, %arg65 = %arg61, %arg66 = %arg58, %arg67 = %arg59, %ready_bar_88 = %ready_bar_78, %arg69 = %cst_72, %arg70 = %cst_71, %arg71 = %cst_71) -> (i32, i32, i32, i32, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1>, tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>>, tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>>, tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>>)  : i32 {
          %mem_89 = ttg.memdesc_index %arg41[%c0_i32_66] : !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc1265)
          %ready_bar_90 = ttg.memdesc_index %arg42[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1266)
          %empty_bar_91 = ttg.memdesc_index %arg43[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1267)
          ttng.wait_barrier %ready_bar_90, %arg64, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1268)
          %next_92 = arith.xori %arg64, %c1_i32_74 : i32 loc(#loc1269)
          %qks = ttng.tmem_subslice %mem_89 {N = 0 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc1056)
          %qks_93 = ttng.tmem_load %qks : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> -> tensor<128x64xf32, #blocked4> loc(#loc1057)
          %qks_94 = ttng.tmem_subslice %mem_89 {N = 64 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc1056)
          %qks_95 = ttng.tmem_load %qks_94 : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> -> tensor<128x64xf32, #blocked4> loc(#loc1057)
          %x = tt.join %qks_93, %qks_95 : tensor<128x64xf32, #blocked4> -> tensor<128x64x2xf32, #blocked5> loc(#loc1270)
          %x_96 = tt.trans %x {order = array<i32: 0, 2, 1>} : tensor<128x64x2xf32, #blocked5> -> tensor<128x2x64xf32, #blocked6> loc(#loc1271)
          %x_97 = tt.reshape %x_96 : tensor<128x2x64xf32, #blocked6> -> tensor<128x128xf32, #linear1> loc(#loc1272)
          %qk = ttg.convert_layout %x_97 : tensor<128x128xf32, #linear1> -> tensor<128x128xf32, #blocked3> loc(#loc1273)
          %m_ij = "tt.reduce"(%qk) <{axis = 1 : i32}> ({
          ^bb0(%m_ij_160: f32 loc(callsite(#loc at #loc730)), %m_ij_161: f32 loc(callsite(#loc at #loc730))):
            %m_ij_162 = arith.maxnumf %m_ij_160, %m_ij_161 : f32 loc(#loc1274)
            tt.reduce.return %m_ij_162 : f32 loc(#loc1059)
          }) : (tensor<128x128xf32, #blocked3>) -> tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc1059)
          %m_ij_98 = tt.splat %arg25 : f32 -> tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc731)
          %m_ij_99 = arith.mulf %m_ij, %m_ij_98 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc731)
          %m_ij_100 = arith.maxnumf %arg69, %m_ij_99 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc732)
          %alpha = arith.subf %arg69, %m_ij_100 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc733)
          %alpha_101 = math.exp2 %alpha : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc734)
          %alpha_tmem = ttng.tmem_subslice %mem_89 {N = 64 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc1061)
          %alpha_tmem_102 = ttg.memdesc_reinterpret %alpha_tmem : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc1062)
          %4 = tt.expand_dims %alpha_101 {axis = 1 : i32} : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xf32, #blocked3> loc(#loc736)
          %5 = ttg.convert_layout %4 : tensor<128x1xf32, #blocked3> -> tensor<128x1xf32, #blocked1> loc(#loc737)
          ttng.tmem_store %5, %alpha_tmem_102, %true_70 : tensor<128x1xf32, #blocked1> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc738)
          ttng.arrive_barrier %ready_bar_88, 1, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc739)
          %qk_103 = tt.splat %arg25 : f32 -> tensor<128x128xf32, #blocked3> loc(#loc1063)
          %qk_104 = tt.elementwise_inline_asm "\0A        {\0A            .reg .b64 ra, rb, rc;\0A            mov.b64 ra, { $2, $3 };\0A            mov.b64 rb, { $4, $5 };\0A            mul.f32x2 rc, ra, rb;\0A            mov.b64 { $0, $1 }, rc;\0A        }\0A        " {constraints = "=r,=r,r,r,r,r", packed_element = 2 : i32, pure = true} %qk, %qk_103 : tensor<128x128xf32, #blocked3>, tensor<128x128xf32, #blocked3> -> tensor<128x128xf32, #blocked3> loc(#loc1064)
          %qk_105 = tt.expand_dims %m_ij_100 {axis = 1 : i32} : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xf32, #blocked3> loc(#loc742)
          %qk_106 = arith.subf %cst_67, %qk_105 : tensor<128x1xf32, #blocked3> loc(#loc743)
          %qk_107 = tt.broadcast %qk_106 : tensor<128x1xf32, #blocked3> -> tensor<128x128xf32, #blocked3> loc(#loc1065)
          %qk_108 = tt.elementwise_inline_asm "\0A        {\0A            .reg .b64 ra, rb, rc;\0A            mov.b64 ra, { $2, $3 };\0A            mov.b64 rb, { $4, $5 };\0A            add.f32x2 rc, ra, rb;\0A            mov.b64 { $0, $1 }, rc;\0A        }\0A        " {constraints = "=r,=r,r,r,r,r", packed_element = 2 : i32, pure = true} %qk_104, %qk_107 : tensor<128x128xf32, #blocked3>, tensor<128x128xf32, #blocked3> -> tensor<128x128xf32, #blocked3> loc(#loc1065)
          %ready_bar_109 = ttg.memdesc_index %arg51[%arg66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1275)
          %empty_bar_110 = ttg.memdesc_index %arg52[%arg66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1276)
          ttng.wait_barrier %empty_bar_110, %arg67, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1277)
          %next_111 = arith.xori %arg67, %c1_i32_74 : i32 loc(#loc1278)
          %p_tmem = ttg.memdesc_reinterpret %qks : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable> loc(#loc1068)
          %qks_112 = tt.reshape %qk_108 : tensor<128x128xf32, #blocked3> -> tensor<128x2x64xf32, #blocked7> loc(#loc1279)
          %qks_113 = tt.trans %qks_112 {order = array<i32: 0, 2, 1>} : tensor<128x2x64xf32, #blocked7> -> tensor<128x64x2xf32, #blocked8> loc(#loc1280)
          %qks_114, %qks_115 = tt.split %qks_113 : tensor<128x64x2xf32, #blocked8> -> tensor<128x64xf32, #ttg.slice<{dim = 2, parent = #blocked8}>> loc(#loc1281)
          %x0 = ttg.convert_layout %qks_114 : tensor<128x64xf32, #ttg.slice<{dim = 2, parent = #blocked8}>> -> tensor<128x64xf32, #blocked4> loc(#loc1282)
          %x1 = ttg.convert_layout %qks_115 : tensor<128x64xf32, #ttg.slice<{dim = 2, parent = #blocked8}>> -> tensor<128x64xf32, #blocked4> loc(#loc1283)
          %qks_116 = tt.reshape %x0 : tensor<128x64xf32, #blocked4> -> tensor<128x2x32xf32, #blocked9> loc(#loc1338)
          %qks_117 = tt.trans %qks_116 {order = array<i32: 0, 2, 1>} : tensor<128x2x32xf32, #blocked9> -> tensor<128x32x2xf32, #blocked10> loc(#loc1339)
          %qks_118, %qks_119 = tt.split %qks_117 : tensor<128x32x2xf32, #blocked10> -> tensor<128x32xf32, #ttg.slice<{dim = 2, parent = #blocked10}>> loc(#loc1340)
          %x0_120 = ttg.convert_layout %qks_118 : tensor<128x32xf32, #ttg.slice<{dim = 2, parent = #blocked10}>> -> tensor<128x32xf32, #blocked> loc(#loc1341)
          %x1_121 = ttg.convert_layout %qks_119 : tensor<128x32xf32, #ttg.slice<{dim = 2, parent = #blocked10}>> -> tensor<128x32xf32, #blocked> loc(#loc1342)
          %qks_122 = tt.reshape %x1 : tensor<128x64xf32, #blocked4> -> tensor<128x2x32xf32, #blocked9> loc(#loc1343)
          %qks_123 = tt.trans %qks_122 {order = array<i32: 0, 2, 1>} : tensor<128x2x32xf32, #blocked9> -> tensor<128x32x2xf32, #blocked10> loc(#loc1344)
          %qks_124, %qks_125 = tt.split %qks_123 : tensor<128x32x2xf32, #blocked10> -> tensor<128x32xf32, #ttg.slice<{dim = 2, parent = #blocked10}>> loc(#loc1345)
          %x0_126 = ttg.convert_layout %qks_124 : tensor<128x32xf32, #ttg.slice<{dim = 2, parent = #blocked10}>> -> tensor<128x32xf32, #blocked> loc(#loc1346)
          %x1_127 = ttg.convert_layout %qks_125 : tensor<128x32xf32, #ttg.slice<{dim = 2, parent = #blocked10}>> -> tensor<128x32xf32, #blocked> loc(#loc1347)
          %p = math.exp2 %x0_120 : tensor<128x32xf32, #blocked> loc(#loc1070)
          %p_128 = ttng.tmem_subslice %p_tmem {N = 0 : i32} : !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x32xbf16, #tmem5, #ttng.tensor_memory, mutable, 128x128> loc(#loc1071)
          %p_129 = arith.truncf %p : tensor<128x32xf32, #blocked> to tensor<128x32xbf16, #blocked> loc(#loc1072)
          ttng.tmem_store %p_129, %p_128, %true_70 : tensor<128x32xbf16, #blocked> -> !ttg.memdesc<128x32xbf16, #tmem5, #ttng.tensor_memory, mutable, 128x128> loc(#loc1073)
          %p_130 = math.exp2 %x1_121 : tensor<128x32xf32, #blocked> loc(#loc1070)
          %p_131 = ttng.tmem_subslice %p_tmem {N = 32 : i32} : !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x32xbf16, #tmem5, #ttng.tensor_memory, mutable, 128x128> loc(#loc1071)
          %p_132 = arith.truncf %p_130 : tensor<128x32xf32, #blocked> to tensor<128x32xbf16, #blocked> loc(#loc1072)
          ttng.tmem_store %p_132, %p_131, %true_70 : tensor<128x32xbf16, #blocked> -> !ttg.memdesc<128x32xbf16, #tmem5, #ttng.tensor_memory, mutable, 128x128> loc(#loc1073)
          %p_133 = math.exp2 %x0_126 : tensor<128x32xf32, #blocked> loc(#loc1070)
          %p_134 = ttng.tmem_subslice %p_tmem {N = 64 : i32} : !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x32xbf16, #tmem5, #ttng.tensor_memory, mutable, 128x128> loc(#loc1071)
          %p_135 = arith.truncf %p_133 : tensor<128x32xf32, #blocked> to tensor<128x32xbf16, #blocked> loc(#loc1072)
          ttng.tmem_store %p_135, %p_134, %true_70 : tensor<128x32xbf16, #blocked> -> !ttg.memdesc<128x32xbf16, #tmem5, #ttng.tensor_memory, mutable, 128x128> loc(#loc1073)
          %p_136 = math.exp2 %x1_127 : tensor<128x32xf32, #blocked> loc(#loc1070)
          %p_137 = ttng.tmem_subslice %p_tmem {N = 96 : i32} : !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x32xbf16, #tmem5, #ttng.tensor_memory, mutable, 128x128> loc(#loc1071)
          %p_138 = arith.truncf %p_136 : tensor<128x32xf32, #blocked> to tensor<128x32xbf16, #blocked> loc(#loc1072)
          ttng.tmem_store %p_138, %p_137, %true_70 : tensor<128x32xbf16, #blocked> -> !ttg.memdesc<128x32xbf16, #tmem5, #ttng.tensor_memory, mutable, 128x128> loc(#loc1073)
          %x_139 = tt.join %p, %p_130 : tensor<128x32xf32, #blocked> -> tensor<128x32x2xf32, #blocked11> loc(#loc1348)
          %x_140 = tt.trans %x_139 {order = array<i32: 0, 2, 1>} : tensor<128x32x2xf32, #blocked11> -> tensor<128x2x32xf32, #blocked12> loc(#loc1349)
          %x_141 = tt.reshape %x_140 : tensor<128x2x32xf32, #blocked12> -> tensor<128x64xf32, #linear2> loc(#loc1350)
          %x0_142 = ttg.convert_layout %x_141 : tensor<128x64xf32, #linear2> -> tensor<128x64xf32, #blocked4> loc(#loc1351)
          %x_143 = tt.join %p_133, %p_136 : tensor<128x32xf32, #blocked> -> tensor<128x32x2xf32, #blocked11> loc(#loc1352)
          %x_144 = tt.trans %x_143 {order = array<i32: 0, 2, 1>} : tensor<128x32x2xf32, #blocked11> -> tensor<128x2x32xf32, #blocked12> loc(#loc1353)
          %x_145 = tt.reshape %x_144 : tensor<128x2x32xf32, #blocked12> -> tensor<128x64xf32, #linear2> loc(#loc1354)
          %x1_146 = ttg.convert_layout %x_145 : tensor<128x64xf32, #linear2> -> tensor<128x64xf32, #blocked4> loc(#loc1355)
          %x_147 = tt.join %x0_142, %x1_146 : tensor<128x64xf32, #blocked4> -> tensor<128x64x2xf32, #blocked5> loc(#loc1288)
          %x_148 = tt.trans %x_147 {order = array<i32: 0, 2, 1>} : tensor<128x64x2xf32, #blocked5> -> tensor<128x2x64xf32, #blocked6> loc(#loc1289)
          %x_149 = tt.reshape %x_148 : tensor<128x2x64xf32, #blocked6> -> tensor<128x128xf32, #linear1> loc(#loc1290)
          %p_150 = ttg.convert_layout %x_149 : tensor<128x128xf32, #linear1> -> tensor<128x128xf32, #blocked3> loc(#loc1291)
          ttng.arrive_barrier %empty_bar_91, 1, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc748)
          %ready_bar_151 = ttg.memdesc_index %arg47[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1292)
          %empty_bar_152 = ttg.memdesc_index %arg48[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1293)
          ttng.wait_barrier %empty_bar_152, %arg65, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1294)
          %next_153 = arith.xori %arg65, %c1_i32_74 : i32 loc(#loc1295)
          ttng.arrive_barrier %ready_bar_109, 1, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc750)
          %6 = tt.reshape %p_150 : tensor<128x128xf32, #blocked3> -> tensor<128x2x64xf32, #blocked7> loc(#loc1077)
          %7 = tt.trans %6 {order = array<i32: 0, 2, 1>} : tensor<128x2x64xf32, #blocked7> -> tensor<128x64x2xf32, #blocked8> loc(#loc1078)
          %outLHS, %outRHS = tt.split %7 : tensor<128x64x2xf32, #blocked8> -> tensor<128x64xf32, #ttg.slice<{dim = 2, parent = #blocked8}>> loc(#loc1079)
          %x0_154 = ttg.convert_layout %outLHS : tensor<128x64xf32, #ttg.slice<{dim = 2, parent = #blocked8}>> -> tensor<128x64xf32, #blocked4> loc(#loc1080)
          %x1_155 = ttg.convert_layout %outRHS : tensor<128x64xf32, #ttg.slice<{dim = 2, parent = #blocked8}>> -> tensor<128x64xf32, #blocked4> loc(#loc1081)
          %8:2 = "tt.reduce"(%x0_154, %x1_155) <{axis = 1 : i32}> ({
          ^bb0(%arg72: f32 loc(callsite(#loc at #loc422)), %arg73: f32 loc(callsite(#loc at #loc422)), %arg74: f32 loc(callsite(#loc at #loc422)), %arg75: f32 loc(callsite(#loc at #loc422))):
            %9:2 = tt.elementwise_inline_asm "\0A        {\0A            .reg .b64 rc, ra, rb;\0A            mov.b64 ra, { $2, $4 };\0A            mov.b64 rb, { $3, $5 };\0A            add.f32x2 rc, ra, rb;\0A            mov.b64 { $0, $1 }, rc;\0A        }\0A        " {constraints = "=r,=r,r,r,r,r", packed_element = 1 : i32, pure = true} %arg72, %arg74, %arg73, %arg75 : f32, f32, f32, f32 -> f32, f32 loc(#loc1082)
            tt.reduce.return %9#0, %9#1 : f32, f32 loc(#loc752)
          }) : (tensor<128x64xf32, #blocked4>, tensor<128x64xf32, #blocked4>) -> (tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>>, tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>>) loc(#loc752)
          %alpha_156 = ttg.convert_layout %alpha_101 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc754)
          %l_i0 = arith.mulf %arg70, %alpha_156 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc755)
          %l_i0_157 = arith.addf %l_i0, %8#0 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc756)
          %l_i1_158 = arith.mulf %arg71, %alpha_156 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc757)
          %l_i1_159 = arith.addf %l_i1_158, %8#1 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc758)
          scf.yield %next_92, %next_153, %c0_i32_66, %next_111, %ready_bar_151, %m_ij_100, %l_i0_157, %l_i1_159 : i32, i32, i32, i32, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1>, tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>>, tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>>, tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc759)
        } loc(#loc1470)
        %l_i = arith.addf %l_i1#6, %l_i1#7 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc760)
        %mem_79 = ttg.memdesc_index %arg41[%c0_i32_66] : !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc1083)
        %ready_bar_80 = ttg.memdesc_index %arg42[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1084)
        %empty_bar_81 = ttg.memdesc_index %arg43[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1085)
        ttng.wait_barrier %ready_bar_80, %l_i1#0, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1086)
        %next = arith.xori %l_i1#0, %c1_i32_74 : i32 loc(#loc1087)
        %m_i_tmem = ttng.tmem_subslice %mem_79 {N = 65 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc763)
        %l_i_tmem = ttng.tmem_subslice %mem_79 {N = 66 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc764)
        %m_i_tmem_82 = ttg.memdesc_reinterpret %m_i_tmem : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc765)
        %l_i_tmem_83 = ttg.memdesc_reinterpret %l_i_tmem : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc766)
        %0 = tt.expand_dims %l_i1#5 {axis = 1 : i32} : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xf32, #blocked3> loc(#loc456)
        %1 = ttg.convert_layout %0 : tensor<128x1xf32, #blocked3> -> tensor<128x1xf32, #blocked1> loc(#loc457)
        ttng.tmem_store %1, %m_i_tmem_82, %true_70 : tensor<128x1xf32, #blocked1> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc458)
        %2 = tt.expand_dims %l_i {axis = 1 : i32} : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> -> tensor<128x1xf32, #blocked4> loc(#loc459)
        %3 = ttg.convert_layout %2 : tensor<128x1xf32, #blocked4> -> tensor<128x1xf32, #blocked1> loc(#loc460)
        ttng.tmem_store %3, %l_i_tmem_83, %true_70 : tensor<128x1xf32, #blocked1> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc461)
        ttng.arrive_barrier %l_i1#4, 1, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc462)
        %ready_bar_84 = ttg.memdesc_index %arg47[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1088)
        %empty_bar_85 = ttg.memdesc_index %arg48[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1089)
        ttng.wait_barrier %empty_bar_85, %l_i1#1, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1090)
        %next_86 = arith.xori %l_i1#1, %c1_i32_74 : i32 loc(#loc1091)
        ttng.arrive_barrier %empty_bar_81, 1, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc464)
        scf.yield %l_i1#2, %l_i1#3, %next, %next_86, %ready_bar_84 : i32, i32, i32, i32, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc465)
      } loc(#loc1460)
      ttg.warp_return loc(#loc)
    }
    partition1(%arg25: f32 loc(unknown), %arg26: i32 loc(unknown), %arg27: i32 loc(unknown), %arg28: i32 loc(unknown), %arg29: !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(unknown), %arg30: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg31: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg32: !ttg.memdesc<6x128x64xbf16, #shared, #smem, mutable> loc(unknown), %arg33: !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> loc(unknown), %arg34: !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> loc(unknown), %arg35: !ttg.memdesc<2x128x64xf32, #tmem, #ttng.tensor_memory, mutable> loc(unknown), %arg36: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg37: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg38: !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(unknown), %arg39: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg40: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg41: !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> loc(unknown), %arg42: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg43: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg44: !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> loc(unknown), %arg45: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg46: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg47: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg48: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg49: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg50: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg51: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg52: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg53: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown), %arg54: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown), %arg55: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown), %arg56: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown)) num_warps(4) {
      %c0_i32_66 = arith.constant 0 : i32 loc(#loc)
      %cst_67 = arith.constant dense<0.000000e+00> : tensor<128x1xf32, #blocked3> loc(#loc466)
      %c128_i32_68 = arith.constant 128 : i32 loc(#loc466)
      %num_pid_m = arith.constant 255 : i32 loc(#loc1296)
      %c148_i32_69 = arith.constant 148 : i32 loc(#loc467)
      %true_70 = arith.constant true loc(#loc466)
      %cst_71 = arith.constant dense<0.000000e+00> : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc466)
      %cst_72 = arith.constant dense<0xFF800000> : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc466)
      %c256_i32_73 = arith.constant 256 : i32 loc(#loc466)
      %c1_i32_74 = arith.constant 1 : i32 loc(#loc466)
      %ready_bar = ttg.memdesc_index %arg49[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1093)
      %empty_bar = ttg.memdesc_index %arg50[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1094)
      ttng.wait_barrier %empty_bar, %c0_i32_66, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1095)
      %start_pid = tt.get_program_id x : i32 loc(#loc1096)
      %num_pid_m_75 = arith.addi %arg28, %num_pid_m : i32 loc(#loc1296)
      %num_pid_m_76 = arith.divsi %num_pid_m_75, %c256_i32_73 : i32 loc(#loc1297)
      %num_pid_n = arith.muli %arg26, %arg27 : i32 loc(#loc1097)
      %num_tiles = arith.muli %num_pid_m_76, %num_pid_n : i32 loc(#loc1098)
      %corr_bar:5 = scf.for %corr_bar_77 = %start_pid to %num_tiles step %c148_i32_69 iter_args(%arg58 = %c0_i32_66, %arg59 = %c0_i32_66, %arg60 = %c0_i32_66, %arg61 = %c1_i32_74, %ready_bar_78 = %ready_bar) -> (i32, i32, i32, i32, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1>)  : i32 {
        %l_i1:8 = scf.for %l_i1_87 = %c0_i32_66 to %arg28 step %c128_i32_68 iter_args(%arg64 = %arg60, %arg65 = %arg61, %arg66 = %arg58, %arg67 = %arg59, %ready_bar_88 = %ready_bar_78, %arg69 = %cst_72, %arg70 = %cst_71, %arg71 = %cst_71) -> (i32, i32, i32, i32, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1>, tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>>, tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>>, tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>>)  : i32 {
          %mem_89 = ttg.memdesc_index %arg44[%c0_i32_66] : !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc1298)
          %ready_bar_90 = ttg.memdesc_index %arg45[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1299)
          %empty_bar_91 = ttg.memdesc_index %arg46[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1300)
          ttng.wait_barrier %ready_bar_90, %arg64, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1301)
          %next_92 = arith.xori %arg64, %c1_i32_74 : i32 loc(#loc1302)
          %qks = ttng.tmem_subslice %mem_89 {N = 0 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc1101)
          %qks_93 = ttng.tmem_load %qks : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> -> tensor<128x64xf32, #blocked4> loc(#loc1102)
          %qks_94 = ttng.tmem_subslice %mem_89 {N = 64 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc1101)
          %qks_95 = ttng.tmem_load %qks_94 : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> -> tensor<128x64xf32, #blocked4> loc(#loc1102)
          %x = tt.join %qks_93, %qks_95 : tensor<128x64xf32, #blocked4> -> tensor<128x64x2xf32, #blocked5> loc(#loc1303)
          %x_96 = tt.trans %x {order = array<i32: 0, 2, 1>} : tensor<128x64x2xf32, #blocked5> -> tensor<128x2x64xf32, #blocked6> loc(#loc1304)
          %x_97 = tt.reshape %x_96 : tensor<128x2x64xf32, #blocked6> -> tensor<128x128xf32, #linear1> loc(#loc1305)
          %qk = ttg.convert_layout %x_97 : tensor<128x128xf32, #linear1> -> tensor<128x128xf32, #blocked3> loc(#loc1306)
          %m_ij = "tt.reduce"(%qk) <{axis = 1 : i32}> ({
          ^bb0(%m_ij_160: f32 loc(callsite(#loc at #loc773)), %m_ij_161: f32 loc(callsite(#loc at #loc773))):
            %m_ij_162 = arith.maxnumf %m_ij_160, %m_ij_161 : f32 loc(#loc1307)
            tt.reduce.return %m_ij_162 : f32 loc(#loc1104)
          }) : (tensor<128x128xf32, #blocked3>) -> tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc1104)
          %m_ij_98 = tt.splat %arg25 : f32 -> tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc774)
          %m_ij_99 = arith.mulf %m_ij, %m_ij_98 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc774)
          %m_ij_100 = arith.maxnumf %arg69, %m_ij_99 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc775)
          %alpha = arith.subf %arg69, %m_ij_100 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc776)
          %alpha_101 = math.exp2 %alpha : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc777)
          %alpha_tmem = ttng.tmem_subslice %mem_89 {N = 64 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc1106)
          %alpha_tmem_102 = ttg.memdesc_reinterpret %alpha_tmem : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc1107)
          %4 = tt.expand_dims %alpha_101 {axis = 1 : i32} : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xf32, #blocked3> loc(#loc779)
          %5 = ttg.convert_layout %4 : tensor<128x1xf32, #blocked3> -> tensor<128x1xf32, #blocked1> loc(#loc780)
          ttng.tmem_store %5, %alpha_tmem_102, %true_70 : tensor<128x1xf32, #blocked1> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc781)
          ttng.arrive_barrier %ready_bar_88, 1, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc782)
          %qk_103 = tt.splat %arg25 : f32 -> tensor<128x128xf32, #blocked3> loc(#loc1108)
          %qk_104 = tt.elementwise_inline_asm "\0A        {\0A            .reg .b64 ra, rb, rc;\0A            mov.b64 ra, { $2, $3 };\0A            mov.b64 rb, { $4, $5 };\0A            mul.f32x2 rc, ra, rb;\0A            mov.b64 { $0, $1 }, rc;\0A        }\0A        " {constraints = "=r,=r,r,r,r,r", packed_element = 2 : i32, pure = true} %qk, %qk_103 : tensor<128x128xf32, #blocked3>, tensor<128x128xf32, #blocked3> -> tensor<128x128xf32, #blocked3> loc(#loc1109)
          %qk_105 = tt.expand_dims %m_ij_100 {axis = 1 : i32} : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xf32, #blocked3> loc(#loc785)
          %qk_106 = arith.subf %cst_67, %qk_105 : tensor<128x1xf32, #blocked3> loc(#loc786)
          %qk_107 = tt.broadcast %qk_106 : tensor<128x1xf32, #blocked3> -> tensor<128x128xf32, #blocked3> loc(#loc1110)
          %qk_108 = tt.elementwise_inline_asm "\0A        {\0A            .reg .b64 ra, rb, rc;\0A            mov.b64 ra, { $2, $3 };\0A            mov.b64 rb, { $4, $5 };\0A            add.f32x2 rc, ra, rb;\0A            mov.b64 { $0, $1 }, rc;\0A        }\0A        " {constraints = "=r,=r,r,r,r,r", packed_element = 2 : i32, pure = true} %qk_104, %qk_107 : tensor<128x128xf32, #blocked3>, tensor<128x128xf32, #blocked3> -> tensor<128x128xf32, #blocked3> loc(#loc1110)
          %ready_bar_109 = ttg.memdesc_index %arg51[%arg66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1308)
          %empty_bar_110 = ttg.memdesc_index %arg52[%arg66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1309)
          ttng.wait_barrier %ready_bar_109, %arg67, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1310)
          %next_111 = arith.xori %arg67, %c1_i32_74 : i32 loc(#loc1311)
          %p_tmem = ttg.memdesc_reinterpret %qks : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable> loc(#loc1113)
          %qks_112 = tt.reshape %qk_108 : tensor<128x128xf32, #blocked3> -> tensor<128x2x64xf32, #blocked7> loc(#loc1312)
          %qks_113 = tt.trans %qks_112 {order = array<i32: 0, 2, 1>} : tensor<128x2x64xf32, #blocked7> -> tensor<128x64x2xf32, #blocked8> loc(#loc1313)
          %qks_114, %qks_115 = tt.split %qks_113 : tensor<128x64x2xf32, #blocked8> -> tensor<128x64xf32, #ttg.slice<{dim = 2, parent = #blocked8}>> loc(#loc1314)
          %x0 = ttg.convert_layout %qks_114 : tensor<128x64xf32, #ttg.slice<{dim = 2, parent = #blocked8}>> -> tensor<128x64xf32, #blocked4> loc(#loc1315)
          %x1 = ttg.convert_layout %qks_115 : tensor<128x64xf32, #ttg.slice<{dim = 2, parent = #blocked8}>> -> tensor<128x64xf32, #blocked4> loc(#loc1316)
          %qks_116 = tt.reshape %x0 : tensor<128x64xf32, #blocked4> -> tensor<128x2x32xf32, #blocked9> loc(#loc1356)
          %qks_117 = tt.trans %qks_116 {order = array<i32: 0, 2, 1>} : tensor<128x2x32xf32, #blocked9> -> tensor<128x32x2xf32, #blocked10> loc(#loc1357)
          %qks_118, %qks_119 = tt.split %qks_117 : tensor<128x32x2xf32, #blocked10> -> tensor<128x32xf32, #ttg.slice<{dim = 2, parent = #blocked10}>> loc(#loc1358)
          %x0_120 = ttg.convert_layout %qks_118 : tensor<128x32xf32, #ttg.slice<{dim = 2, parent = #blocked10}>> -> tensor<128x32xf32, #blocked> loc(#loc1359)
          %x1_121 = ttg.convert_layout %qks_119 : tensor<128x32xf32, #ttg.slice<{dim = 2, parent = #blocked10}>> -> tensor<128x32xf32, #blocked> loc(#loc1360)
          %qks_122 = tt.reshape %x1 : tensor<128x64xf32, #blocked4> -> tensor<128x2x32xf32, #blocked9> loc(#loc1361)
          %qks_123 = tt.trans %qks_122 {order = array<i32: 0, 2, 1>} : tensor<128x2x32xf32, #blocked9> -> tensor<128x32x2xf32, #blocked10> loc(#loc1362)
          %qks_124, %qks_125 = tt.split %qks_123 : tensor<128x32x2xf32, #blocked10> -> tensor<128x32xf32, #ttg.slice<{dim = 2, parent = #blocked10}>> loc(#loc1363)
          %x0_126 = ttg.convert_layout %qks_124 : tensor<128x32xf32, #ttg.slice<{dim = 2, parent = #blocked10}>> -> tensor<128x32xf32, #blocked> loc(#loc1364)
          %x1_127 = ttg.convert_layout %qks_125 : tensor<128x32xf32, #ttg.slice<{dim = 2, parent = #blocked10}>> -> tensor<128x32xf32, #blocked> loc(#loc1365)
          %p = math.exp2 %x0_120 : tensor<128x32xf32, #blocked> loc(#loc1115)
          %p_128 = ttng.tmem_subslice %p_tmem {N = 0 : i32} : !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x32xbf16, #tmem5, #ttng.tensor_memory, mutable, 128x128> loc(#loc1116)
          %p_129 = arith.truncf %p : tensor<128x32xf32, #blocked> to tensor<128x32xbf16, #blocked> loc(#loc1117)
          ttng.tmem_store %p_129, %p_128, %true_70 : tensor<128x32xbf16, #blocked> -> !ttg.memdesc<128x32xbf16, #tmem5, #ttng.tensor_memory, mutable, 128x128> loc(#loc1118)
          %p_130 = math.exp2 %x1_121 : tensor<128x32xf32, #blocked> loc(#loc1115)
          %p_131 = ttng.tmem_subslice %p_tmem {N = 32 : i32} : !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x32xbf16, #tmem5, #ttng.tensor_memory, mutable, 128x128> loc(#loc1116)
          %p_132 = arith.truncf %p_130 : tensor<128x32xf32, #blocked> to tensor<128x32xbf16, #blocked> loc(#loc1117)
          ttng.tmem_store %p_132, %p_131, %true_70 : tensor<128x32xbf16, #blocked> -> !ttg.memdesc<128x32xbf16, #tmem5, #ttng.tensor_memory, mutable, 128x128> loc(#loc1118)
          %p_133 = math.exp2 %x0_126 : tensor<128x32xf32, #blocked> loc(#loc1115)
          %p_134 = ttng.tmem_subslice %p_tmem {N = 64 : i32} : !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x32xbf16, #tmem5, #ttng.tensor_memory, mutable, 128x128> loc(#loc1116)
          %p_135 = arith.truncf %p_133 : tensor<128x32xf32, #blocked> to tensor<128x32xbf16, #blocked> loc(#loc1117)
          ttng.tmem_store %p_135, %p_134, %true_70 : tensor<128x32xbf16, #blocked> -> !ttg.memdesc<128x32xbf16, #tmem5, #ttng.tensor_memory, mutable, 128x128> loc(#loc1118)
          %p_136 = math.exp2 %x1_127 : tensor<128x32xf32, #blocked> loc(#loc1115)
          %p_137 = ttng.tmem_subslice %p_tmem {N = 96 : i32} : !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x32xbf16, #tmem5, #ttng.tensor_memory, mutable, 128x128> loc(#loc1116)
          %p_138 = arith.truncf %p_136 : tensor<128x32xf32, #blocked> to tensor<128x32xbf16, #blocked> loc(#loc1117)
          ttng.tmem_store %p_138, %p_137, %true_70 : tensor<128x32xbf16, #blocked> -> !ttg.memdesc<128x32xbf16, #tmem5, #ttng.tensor_memory, mutable, 128x128> loc(#loc1118)
          %x_139 = tt.join %p, %p_130 : tensor<128x32xf32, #blocked> -> tensor<128x32x2xf32, #blocked11> loc(#loc1366)
          %x_140 = tt.trans %x_139 {order = array<i32: 0, 2, 1>} : tensor<128x32x2xf32, #blocked11> -> tensor<128x2x32xf32, #blocked12> loc(#loc1367)
          %x_141 = tt.reshape %x_140 : tensor<128x2x32xf32, #blocked12> -> tensor<128x64xf32, #linear2> loc(#loc1368)
          %x0_142 = ttg.convert_layout %x_141 : tensor<128x64xf32, #linear2> -> tensor<128x64xf32, #blocked4> loc(#loc1369)
          %x_143 = tt.join %p_133, %p_136 : tensor<128x32xf32, #blocked> -> tensor<128x32x2xf32, #blocked11> loc(#loc1370)
          %x_144 = tt.trans %x_143 {order = array<i32: 0, 2, 1>} : tensor<128x32x2xf32, #blocked11> -> tensor<128x2x32xf32, #blocked12> loc(#loc1371)
          %x_145 = tt.reshape %x_144 : tensor<128x2x32xf32, #blocked12> -> tensor<128x64xf32, #linear2> loc(#loc1372)
          %x1_146 = ttg.convert_layout %x_145 : tensor<128x64xf32, #linear2> -> tensor<128x64xf32, #blocked4> loc(#loc1373)
          %x_147 = tt.join %x0_142, %x1_146 : tensor<128x64xf32, #blocked4> -> tensor<128x64x2xf32, #blocked5> loc(#loc1321)
          %x_148 = tt.trans %x_147 {order = array<i32: 0, 2, 1>} : tensor<128x64x2xf32, #blocked5> -> tensor<128x2x64xf32, #blocked6> loc(#loc1322)
          %x_149 = tt.reshape %x_148 : tensor<128x2x64xf32, #blocked6> -> tensor<128x128xf32, #linear1> loc(#loc1323)
          %p_150 = ttg.convert_layout %x_149 : tensor<128x128xf32, #linear1> -> tensor<128x128xf32, #blocked3> loc(#loc1324)
          ttng.arrive_barrier %empty_bar_91, 1, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc791)
          %ready_bar_151 = ttg.memdesc_index %arg49[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1325)
          %empty_bar_152 = ttg.memdesc_index %arg50[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1326)
          ttng.wait_barrier %empty_bar_152, %arg65, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1327)
          %next_153 = arith.xori %arg65, %c1_i32_74 : i32 loc(#loc1328)
          ttng.arrive_barrier %empty_bar_110, 1, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc793)
          %6 = tt.reshape %p_150 : tensor<128x128xf32, #blocked3> -> tensor<128x2x64xf32, #blocked7> loc(#loc1122)
          %7 = tt.trans %6 {order = array<i32: 0, 2, 1>} : tensor<128x2x64xf32, #blocked7> -> tensor<128x64x2xf32, #blocked8> loc(#loc1123)
          %outLHS, %outRHS = tt.split %7 : tensor<128x64x2xf32, #blocked8> -> tensor<128x64xf32, #ttg.slice<{dim = 2, parent = #blocked8}>> loc(#loc1124)
          %x0_154 = ttg.convert_layout %outLHS : tensor<128x64xf32, #ttg.slice<{dim = 2, parent = #blocked8}>> -> tensor<128x64xf32, #blocked4> loc(#loc1125)
          %x1_155 = ttg.convert_layout %outRHS : tensor<128x64xf32, #ttg.slice<{dim = 2, parent = #blocked8}>> -> tensor<128x64xf32, #blocked4> loc(#loc1126)
          %8:2 = "tt.reduce"(%x0_154, %x1_155) <{axis = 1 : i32}> ({
          ^bb0(%arg72: f32 loc(callsite(#loc at #loc469)), %arg73: f32 loc(callsite(#loc at #loc469)), %arg74: f32 loc(callsite(#loc at #loc469)), %arg75: f32 loc(callsite(#loc at #loc469))):
            %9:2 = tt.elementwise_inline_asm "\0A        {\0A            .reg .b64 rc, ra, rb;\0A            mov.b64 ra, { $2, $4 };\0A            mov.b64 rb, { $3, $5 };\0A            add.f32x2 rc, ra, rb;\0A            mov.b64 { $0, $1 }, rc;\0A        }\0A        " {constraints = "=r,=r,r,r,r,r", packed_element = 1 : i32, pure = true} %arg72, %arg74, %arg73, %arg75 : f32, f32, f32, f32 -> f32, f32 loc(#loc1127)
            tt.reduce.return %9#0, %9#1 : f32, f32 loc(#loc795)
          }) : (tensor<128x64xf32, #blocked4>, tensor<128x64xf32, #blocked4>) -> (tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>>, tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>>) loc(#loc795)
          %alpha_156 = ttg.convert_layout %alpha_101 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc797)
          %l_i0 = arith.mulf %arg70, %alpha_156 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc798)
          %l_i0_157 = arith.addf %l_i0, %8#0 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc799)
          %l_i1_158 = arith.mulf %arg71, %alpha_156 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc800)
          %l_i1_159 = arith.addf %l_i1_158, %8#1 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc801)
          scf.yield %next_92, %next_153, %c0_i32_66, %next_111, %ready_bar_151, %m_ij_100, %l_i0_157, %l_i1_159 : i32, i32, i32, i32, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1>, tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>>, tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>>, tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc802)
        } loc(#loc1471)
        %l_i = arith.addf %l_i1#6, %l_i1#7 : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc803)
        %mem_79 = ttg.memdesc_index %arg44[%c0_i32_66] : !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc1128)
        %ready_bar_80 = ttg.memdesc_index %arg45[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1129)
        %empty_bar_81 = ttg.memdesc_index %arg46[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1130)
        ttng.wait_barrier %ready_bar_80, %l_i1#0, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1131)
        %next = arith.xori %l_i1#0, %c1_i32_74 : i32 loc(#loc1132)
        %m_i_tmem = ttng.tmem_subslice %mem_79 {N = 65 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc806)
        %l_i_tmem = ttng.tmem_subslice %mem_79 {N = 66 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc807)
        %m_i_tmem_82 = ttg.memdesc_reinterpret %m_i_tmem : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc808)
        %l_i_tmem_83 = ttg.memdesc_reinterpret %l_i_tmem : !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc809)
        %0 = tt.expand_dims %l_i1#5 {axis = 1 : i32} : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xf32, #blocked3> loc(#loc472)
        %1 = ttg.convert_layout %0 : tensor<128x1xf32, #blocked3> -> tensor<128x1xf32, #blocked1> loc(#loc473)
        ttng.tmem_store %1, %m_i_tmem_82, %true_70 : tensor<128x1xf32, #blocked1> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc474)
        %2 = tt.expand_dims %l_i {axis = 1 : i32} : tensor<128xf32, #ttg.slice<{dim = 1, parent = #blocked4}>> -> tensor<128x1xf32, #blocked4> loc(#loc475)
        %3 = ttg.convert_layout %2 : tensor<128x1xf32, #blocked4> -> tensor<128x1xf32, #blocked1> loc(#loc476)
        ttng.tmem_store %3, %l_i_tmem_83, %true_70 : tensor<128x1xf32, #blocked1> -> !ttg.memdesc<128x1xf32, #tmem2, #ttng.tensor_memory, mutable> loc(#loc477)
        ttng.arrive_barrier %l_i1#4, 1, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc478)
        %ready_bar_84 = ttg.memdesc_index %arg49[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1133)
        %empty_bar_85 = ttg.memdesc_index %arg50[%c0_i32_66] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1134)
        ttng.wait_barrier %empty_bar_85, %l_i1#1, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc1135)
        %next_86 = arith.xori %l_i1#1, %c1_i32_74 : i32 loc(#loc1136)
        ttng.arrive_barrier %empty_bar_81, 1, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc480)
        scf.yield %l_i1#2, %l_i1#3, %next, %next_86, %ready_bar_84 : i32, i32, i32, i32, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc481)
      } loc(#loc1462)
      ttg.warp_return loc(#loc)
    }
    partition2(%arg25: f32 loc(unknown), %arg26: i32 loc(unknown), %arg27: i32 loc(unknown), %arg28: i32 loc(unknown), %arg29: !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(unknown), %arg30: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg31: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg32: !ttg.memdesc<6x128x64xbf16, #shared, #smem, mutable> loc(unknown), %arg33: !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> loc(unknown), %arg34: !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> loc(unknown), %arg35: !ttg.memdesc<2x128x64xf32, #tmem, #ttng.tensor_memory, mutable> loc(unknown), %arg36: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg37: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg38: !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(unknown), %arg39: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg40: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg41: !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> loc(unknown), %arg42: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg43: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg44: !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> loc(unknown), %arg45: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg46: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg47: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg48: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg49: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg50: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg51: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg52: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg53: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown), %arg54: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown), %arg55: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown), %arg56: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown)) num_warps(1) {
      %c6_i32 = arith.constant 6 : i32 loc(#loc)
      %c2_i32_66 = arith.constant 2 : i32 loc(#loc)
      %c0_i32_67 = arith.constant 0 : i32 loc(#loc)
      %c148_i32_68 = arith.constant 148 : i32 loc(#loc197)
      %c1_i32_69 = arith.constant 1 : i32 loc(#loc)
      %true_70 = arith.constant true loc(#loc)
      %false = arith.constant false loc(#loc)
      %c128_i32_71 = arith.constant 128 : i32 loc(#loc)
      %num_pid_m = arith.constant 255 : i32 loc(#loc1137)
      %c256_i32_72 = arith.constant 256 : i32 loc(#loc)
      %start_pid = tt.get_program_id x : i32 loc(#loc813)
      %num_pid_m_73 = arith.addi %arg28, %num_pid_m : i32 loc(#loc1137)
      %num_pid_m_74 = arith.divsi %num_pid_m_73, %c256_i32_72 : i32 loc(#loc1138)
      %num_pid_n = arith.muli %arg26, %arg27 : i32 loc(#loc814)
      %num_tiles = arith.muli %num_pid_m_74, %num_pid_n : i32 loc(#loc815)
      %s1_producer:8 = scf.for %s1_producer_75 = %start_pid to %num_tiles step %c148_i32_68 iter_args(%arg58 = %c0_i32_67, %arg59 = %c0_i32_67, %arg60 = %c0_i32_67, %arg61 = %c0_i32_67, %arg62 = %c0_i32_67, %arg63 = %c0_i32_67, %arg64 = %c0_i32_67, %arg65 = %c0_i32_67) -> (i32, i32, i32, i32, i32, i32, i32, i32)  : i32 {
        %num_mmas = arith.divsi %arg28, %c128_i32_71 : i32 loc(#loc484)
        %mem_76 = ttg.memdesc_index %arg29[%arg58] : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc817)
        %ready_bar = ttg.memdesc_index %arg30[%arg58] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc818)
        %empty_bar = ttg.memdesc_index %arg31[%arg58] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc819)
        ttng.wait_barrier %ready_bar, %arg59, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc820)
        %next_index = arith.addi %arg58, %c1_i32_69 : i32 loc(#loc1140)
        %rollover = arith.cmpi eq, %next_index, %c2_i32_66 : i32 loc(#loc1141)
        %index = arith.select %rollover, %c0_i32_67, %next_index : i32 loc(#loc1142)
        %phase = arith.xori %arg59, %c1_i32_69 : i32 loc(#loc1143)
        %phase_77 = arith.select %rollover, %phase, %arg59 : i32 loc(#loc1144)
        %mem_78 = ttg.memdesc_index %arg32[%arg60] : !ttg.memdesc<6x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64> loc(#loc822)
        %ready_bar_79 = ttg.memdesc_index %arg33[%arg60] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc823)
        %empty_bar_80 = ttg.memdesc_index %arg34[%arg60] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc824)
        ttng.wait_barrier %ready_bar_79, %arg61, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc825)
        %next_index_81 = arith.addi %arg60, %c1_i32_69 : i32 loc(#loc1145)
        %rollover_82 = arith.cmpi eq, %next_index_81, %c6_i32 : i32 loc(#loc1146)
        %index_83 = arith.select %rollover_82, %c0_i32_67, %next_index_81 : i32 loc(#loc1147)
        %phase_84 = arith.xori %arg61, %c1_i32_69 : i32 loc(#loc1148)
        %phase_85 = arith.select %rollover_82, %phase_84, %arg61 : i32 loc(#loc1149)
        %mem_86 = ttg.memdesc_index %arg41[%c0_i32_67] : !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc827)
        %ready_bar_87 = ttg.memdesc_index %arg42[%c0_i32_67] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc828)
        %empty_bar_88 = ttg.memdesc_index %arg43[%c0_i32_67] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc829)
        ttng.wait_barrier %empty_bar_88, %arg64, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc830)
        %next = arith.xori %arg64, %c1_i32_69 : i32 loc(#loc1150)
        %0 = ttg.memdesc_trans %mem_78 {order = array<i32: 1, 0>} : !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64> -> !ttg.memdesc<64x128xbf16, #shared2, #smem, mutable, 6x64x128> loc(#loc207)
        %1 = ttng.tc_gen5_mma %mem_76, %0, %mem_86[], %false, %true_70, %ready_bar_87[%true_70] {is_async} : !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64>, !ttg.memdesc<64x128xbf16, #shared2, #smem, mutable, 6x64x128>, !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc208)
        %mem_89 = ttg.memdesc_index %arg29[%index] : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc832)
        %ready_bar_90 = ttg.memdesc_index %arg30[%index] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc833)
        %empty_bar_91 = ttg.memdesc_index %arg31[%index] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc834)
        ttng.wait_barrier %ready_bar_90, %phase_77, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc835)
        %next_index_92 = arith.addi %index, %c1_i32_69 : i32 loc(#loc1151)
        %rollover_93 = arith.cmpi eq, %next_index_92, %c2_i32_66 : i32 loc(#loc1152)
        %index_94 = arith.select %rollover_93, %c0_i32_67, %next_index_92 : i32 loc(#loc1153)
        %phase_95 = arith.xori %phase_77, %c1_i32_69 : i32 loc(#loc1154)
        %phase_96 = arith.select %rollover_93, %phase_95, %phase_77 : i32 loc(#loc1155)
        %mem_97 = ttg.memdesc_index %arg44[%c0_i32_67] : !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc837)
        %ready_bar_98 = ttg.memdesc_index %arg45[%c0_i32_67] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc838)
        %empty_bar_99 = ttg.memdesc_index %arg46[%c0_i32_67] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc839)
        ttng.wait_barrier %empty_bar_99, %arg65, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc840)
        %next_100 = arith.xori %arg65, %c1_i32_69 : i32 loc(#loc1156)
        %2 = ttng.tc_gen5_mma %mem_89, %0, %mem_97[], %false, %true_70, %ready_bar_98[%true_70], %empty_bar_80[%true_70] {is_async} : !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64>, !ttg.memdesc<64x128xbf16, #shared2, #smem, mutable, 6x64x128>, !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc211)
        %mem_101 = ttg.memdesc_index %arg32[%index_83] : !ttg.memdesc<6x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64> loc(#loc842)
        %ready_bar_102 = ttg.memdesc_index %arg33[%index_83] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc843)
        %empty_bar_103 = ttg.memdesc_index %arg34[%index_83] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc844)
        ttng.wait_barrier %ready_bar_102, %phase_85, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc845)
        %next_index_104 = arith.addi %index_83, %c1_i32_69 : i32 loc(#loc1157)
        %rollover_105 = arith.cmpi eq, %next_index_104, %c6_i32 : i32 loc(#loc1158)
        %index_106 = arith.select %rollover_105, %c0_i32_67, %next_index_104 : i32 loc(#loc1159)
        %phase_107 = arith.xori %phase_85, %c1_i32_69 : i32 loc(#loc1160)
        %phase_108 = arith.select %rollover_105, %phase_107, %phase_85 : i32 loc(#loc1161)
        %mem_109 = ttg.memdesc_index %arg35[%arg62] : !ttg.memdesc<2x128x64xf32, #tmem, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc847)
        %ready_bar_110 = ttg.memdesc_index %arg36[%arg62] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc848)
        %empty_bar_111 = ttg.memdesc_index %arg37[%arg62] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc849)
        ttng.wait_barrier %empty_bar_111, %arg63, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc850)
        %next_index_112 = arith.addi %arg62, %c1_i32_69 : i32 loc(#loc1162)
        %rollover_113 = arith.cmpi eq, %next_index_112, %c2_i32_66 : i32 loc(#loc1163)
        %index_114 = arith.select %rollover_113, %c0_i32_67, %next_index_112 : i32 loc(#loc1164)
        %phase_115 = arith.xori %arg63, %c1_i32_69 : i32 loc(#loc1165)
        %phase_116 = arith.select %rollover_113, %phase_115, %arg63 : i32 loc(#loc1166)
        %mem_117 = ttg.memdesc_index %arg41[%c0_i32_67] : !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc852)
        %ready_bar_118 = ttg.memdesc_index %arg42[%c0_i32_67] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc853)
        %empty_bar_119 = ttg.memdesc_index %arg43[%c0_i32_67] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc854)
        ttng.wait_barrier %empty_bar_119, %next, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc855)
        %p_tmem = ttng.tmem_subslice %mem_117 {N = 0 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc856)
        %p0_tmem = ttg.memdesc_reinterpret %p_tmem : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable> loc(#loc857)
        %3 = ttng.tc_gen5_mma %p0_tmem, %mem_101, %mem_109[], %false, %true_70, %ready_bar_110[%true_70] {is_async} : !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable>, !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64>, !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc217)
        %4 = arith.subi %num_mmas, %c1_i32_69 : i32 loc(#loc218)
        %o1_init:11 = scf.for %o1_init_133 = %c0_i32_67 to %4 step %c1_i32_69 iter_args(%index_134 = %index_106, %phase_135 = %phase_108, %index_136 = %index_114, %phase_137 = %phase_116, %s0_producer = %arg64, %next_138 = %next_100, %mem_139 = %mem_117, %ready_bar_140 = %ready_bar_118, %mem_141 = %mem_101, %empty_bar_142 = %empty_bar_103, %arg77 = %false) -> (i32, i32, i32, i32, i32, i32, !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1>, !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1>, i1)  : i32 {
          %mem_143 = ttg.memdesc_index %arg32[%index_134] : !ttg.memdesc<6x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64> loc(#loc859)
          %ready_bar_144 = ttg.memdesc_index %arg33[%index_134] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc860)
          %empty_bar_145 = ttg.memdesc_index %arg34[%index_134] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc861)
          ttng.wait_barrier %ready_bar_144, %phase_135, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc862)
          %next_index_146 = arith.addi %index_134, %c1_i32_69 : i32 loc(#loc1168)
          %rollover_147 = arith.cmpi eq, %next_index_146, %c6_i32 : i32 loc(#loc1169)
          %index_148 = arith.select %rollover_147, %c0_i32_67, %next_index_146 : i32 loc(#loc1170)
          %phase_149 = arith.xori %phase_135, %c1_i32_69 : i32 loc(#loc1171)
          %phase_150 = arith.select %rollover_147, %phase_149, %phase_135 : i32 loc(#loc1172)
          %6 = ttg.memdesc_trans %mem_143 {order = array<i32: 1, 0>} : !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64> -> !ttg.memdesc<64x128xbf16, #shared2, #smem, mutable, 6x64x128> loc(#loc221)
          %7 = ttng.tc_gen5_mma %mem_76, %6, %mem_139[], %false, %true_70, %ready_bar_140[%true_70] {is_async} : !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64>, !ttg.memdesc<64x128xbf16, #shared2, #smem, mutable, 6x64x128>, !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc222)
          %mem_151 = ttg.memdesc_index %arg35[%index_136] : !ttg.memdesc<2x128x64xf32, #tmem, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc864)
          %ready_bar_152 = ttg.memdesc_index %arg36[%index_136] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc865)
          %empty_bar_153 = ttg.memdesc_index %arg37[%index_136] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc866)
          ttng.wait_barrier %empty_bar_153, %phase_137, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc867)
          %next_index_154 = arith.addi %index_136, %c1_i32_69 : i32 loc(#loc1173)
          %rollover_155 = arith.cmpi eq, %next_index_154, %c2_i32_66 : i32 loc(#loc1174)
          %index_156 = arith.select %rollover_155, %c0_i32_67, %next_index_154 : i32 loc(#loc1175)
          %phase_157 = arith.xori %phase_137, %c1_i32_69 : i32 loc(#loc1176)
          %phase_158 = arith.select %rollover_155, %phase_157, %phase_137 : i32 loc(#loc1177)
          %mem_159 = ttg.memdesc_index %arg44[%c0_i32_67] : !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc869)
          %ready_bar_160 = ttg.memdesc_index %arg45[%c0_i32_67] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc870)
          %empty_bar_161 = ttg.memdesc_index %arg46[%c0_i32_67] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc871)
          ttng.wait_barrier %empty_bar_161, %next_138, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc872)
          %next_162 = arith.xori %next_138, %c1_i32_69 : i32 loc(#loc1178)
          %p_tmem_163 = ttng.tmem_subslice %mem_159 {N = 0 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc874)
          %p1_tmem_164 = ttg.memdesc_reinterpret %p_tmem_163 : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable> loc(#loc875)
          %8 = ttng.tc_gen5_mma %p1_tmem_164, %mem_141, %mem_151[], %arg77, %true_70, %ready_bar_152[%true_70], %empty_bar_142[%true_70] {is_async} : !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable>, !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64>, !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc226)
          %9 = ttng.tc_gen5_mma %mem_89, %6, %mem_159[], %false, %true_70, %ready_bar_160[%true_70], %empty_bar_145[%true_70] {is_async} : !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64>, !ttg.memdesc<64x128xbf16, #shared2, #smem, mutable, 6x64x128>, !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc227)
          %mem_165 = ttg.memdesc_index %arg32[%index_148] : !ttg.memdesc<6x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64> loc(#loc876)
          %ready_bar_166 = ttg.memdesc_index %arg33[%index_148] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc877)
          %empty_bar_167 = ttg.memdesc_index %arg34[%index_148] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc878)
          ttng.wait_barrier %ready_bar_166, %phase_150, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc879)
          %next_index_168 = arith.addi %index_148, %c1_i32_69 : i32 loc(#loc1179)
          %rollover_169 = arith.cmpi eq, %next_index_168, %c6_i32 : i32 loc(#loc1180)
          %index_170 = arith.select %rollover_169, %c0_i32_67, %next_index_168 : i32 loc(#loc1181)
          %phase_171 = arith.xori %phase_150, %c1_i32_69 : i32 loc(#loc1182)
          %phase_172 = arith.select %rollover_169, %phase_171, %phase_150 : i32 loc(#loc1183)
          %mem_173 = ttg.memdesc_index %arg35[%index_156] : !ttg.memdesc<2x128x64xf32, #tmem, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc881)
          %ready_bar_174 = ttg.memdesc_index %arg36[%index_156] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc882)
          %empty_bar_175 = ttg.memdesc_index %arg37[%index_156] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc883)
          ttng.wait_barrier %empty_bar_175, %phase_158, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc884)
          %next_index_176 = arith.addi %index_156, %c1_i32_69 : i32 loc(#loc1184)
          %rollover_177 = arith.cmpi eq, %next_index_176, %c2_i32_66 : i32 loc(#loc1185)
          %index_178 = arith.select %rollover_177, %c0_i32_67, %next_index_176 : i32 loc(#loc1186)
          %phase_179 = arith.xori %phase_158, %c1_i32_69 : i32 loc(#loc1187)
          %phase_180 = arith.select %rollover_177, %phase_179, %phase_158 : i32 loc(#loc1188)
          %mem_181 = ttg.memdesc_index %arg41[%c0_i32_67] : !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc886)
          %ready_bar_182 = ttg.memdesc_index %arg42[%c0_i32_67] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc887)
          %empty_bar_183 = ttg.memdesc_index %arg43[%c0_i32_67] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc888)
          ttng.wait_barrier %empty_bar_183, %s0_producer, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc889)
          %next_184 = arith.xori %s0_producer, %c1_i32_69 : i32 loc(#loc1189)
          %p_tmem_185 = ttng.tmem_subslice %mem_181 {N = 0 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc891)
          %p0_tmem_186 = ttg.memdesc_reinterpret %p_tmem_185 : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable> loc(#loc892)
          %10 = ttng.tc_gen5_mma %p0_tmem_186, %mem_165, %mem_173[], %true_70, %true_70, %ready_bar_174[%true_70] {is_async} : !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable>, !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64>, !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc232)
          scf.yield %index_170, %phase_172, %index_178, %phase_180, %next_184, %next_162, %mem_181, %ready_bar_182, %mem_165, %empty_bar_167, %true_70 : i32, i32, i32, i32, i32, i32, !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1>, !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1>, i1 loc(#loc233)
        } loc(#loc1490)
        ttng.tc_gen5_commit %empty_bar : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc234)
        ttng.tc_gen5_commit %empty_bar_91 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc235)
        %mem_120 = ttg.memdesc_index %arg35[%o1_init#2] : !ttg.memdesc<2x128x64xf32, #tmem, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64> loc(#loc893)
        %ready_bar_121 = ttg.memdesc_index %arg36[%o1_init#2] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc894)
        %empty_bar_122 = ttg.memdesc_index %arg37[%o1_init#2] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc895)
        ttng.wait_barrier %empty_bar_122, %o1_init#3, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc896)
        %next_index_123 = arith.addi %o1_init#2, %c1_i32_69 : i32 loc(#loc1190)
        %rollover_124 = arith.cmpi eq, %next_index_123, %c2_i32_66 : i32 loc(#loc1191)
        %index_125 = arith.select %rollover_124, %c0_i32_67, %next_index_123 : i32 loc(#loc1192)
        %phase_126 = arith.xori %o1_init#3, %c1_i32_69 : i32 loc(#loc1193)
        %phase_127 = arith.select %rollover_124, %phase_126, %o1_init#3 : i32 loc(#loc1194)
        %mem_128 = ttg.memdesc_index %arg44[%c0_i32_67] : !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> -> !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc898)
        %ready_bar_129 = ttg.memdesc_index %arg45[%c0_i32_67] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc899)
        %empty_bar_130 = ttg.memdesc_index %arg46[%c0_i32_67] : !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc900)
        ttng.wait_barrier %empty_bar_130, %o1_init#5, %true_70 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc901)
        %next_131 = arith.xori %o1_init#5, %c1_i32_69 : i32 loc(#loc1195)
        %p_tmem_132 = ttng.tmem_subslice %mem_128 {N = 0 : i32} : !ttg.memdesc<128x128xf32, #tmem1, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> loc(#loc903)
        %p1_tmem = ttg.memdesc_reinterpret %p_tmem_132 : !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 1x128x128> -> !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable> loc(#loc904)
        %5 = ttng.tc_gen5_mma %p1_tmem, %o1_init#8, %mem_120[], %o1_init#10, %true_70, %ready_bar_121[%true_70], %o1_init#9[%true_70], %o1_init#7[%true_70], %ready_bar_129[%true_70] {is_async} : !ttg.memdesc<128x128xbf16, #tmem4, #ttng.tensor_memory, mutable>, !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64>, !ttg.memdesc<128x64xf32, #tmem, #ttng.tensor_memory, mutable, 2x128x64>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc239)
        scf.yield %index_94, %phase_96, %o1_init#0, %o1_init#1, %index_125, %phase_127, %o1_init#4, %next_131 : i32, i32, i32, i32, i32, i32, i32, i32 loc(#loc240)
      } loc(#loc1482)
      ttg.warp_return loc(#loc)
    }
    partition3(%arg25: f32 loc(unknown), %arg26: i32 loc(unknown), %arg27: i32 loc(unknown), %arg28: i32 loc(unknown), %arg29: !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(unknown), %arg30: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg31: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg32: !ttg.memdesc<6x128x64xbf16, #shared, #smem, mutable> loc(unknown), %arg33: !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> loc(unknown), %arg34: !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> loc(unknown), %arg35: !ttg.memdesc<2x128x64xf32, #tmem, #ttng.tensor_memory, mutable> loc(unknown), %arg36: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg37: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg38: !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(unknown), %arg39: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg40: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg41: !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> loc(unknown), %arg42: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg43: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg44: !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> loc(unknown), %arg45: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg46: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg47: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg48: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg49: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg50: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg51: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg52: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg53: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown), %arg54: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown), %arg55: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown), %arg56: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown)) num_warps(1) {
      %c6_i32 = arith.constant 6 : i32 loc(#loc)
      %true_66 = arith.constant true loc(#loc)
      %c2_i32_67 = arith.constant 2 : i32 loc(#loc)
      %c1_i32_68 = arith.constant 1 : i32 loc(#loc)
      %c148_i32_69 = arith.constant 148 : i32 loc(#loc241)
      %c128_i32_70 = arith.constant 128 : i32 loc(#loc)
      %c0_i32_71 = arith.constant 0 : i32 loc(#loc)
      %num_pid_m = arith.constant 255 : i32 loc(#loc1196)
      %c256_i32_72 = arith.constant 256 : i32 loc(#loc)
      %start_pid = tt.get_program_id x : i32 loc(#loc906)
      %num_pid_m_73 = arith.addi %arg28, %num_pid_m : i32 loc(#loc1196)
      %num_pid_m_74 = arith.divsi %num_pid_m_73, %c256_i32_72 : i32 loc(#loc1197)
      %num_pid_n = arith.muli %arg26, %arg27 : i32 loc(#loc907)
      %num_tiles = arith.muli %num_pid_m_74, %num_pid_n : i32 loc(#loc908)
      %kv_producer:4 = scf.for %kv_producer_75 = %start_pid to %num_tiles step %c148_i32_69 iter_args(%arg58 = %c0_i32_71, %arg59 = %c0_i32_71, %arg60 = %c0_i32_71, %arg61 = %c0_i32_71) -> (i32, i32, i32, i32)  : i32 {
        %group_id = arith.divsi %kv_producer_75, %num_pid_m_74 : i32 loc(#loc910)
        %group_size_n = arith.subi %num_pid_n, %group_id : i32 loc(#loc911)
        %group_size_n_76 = arith.minsi %group_size_n, %c1_i32_68 : i32 loc(#loc912)
        %pid_n = arith.remsi %kv_producer_75, %group_size_n_76 : i32 loc(#loc913)
        %pid_n_77 = arith.addi %group_id, %pid_n : i32 loc(#loc914)
        %pid_m = arith.remsi %kv_producer_75, %num_pid_m_74 : i32 loc(#loc915)
        %pid_m_78 = arith.divsi %pid_m, %group_size_n_76 : i32 loc(#loc916)
        %off_z = arith.divsi %pid_n_77, %arg27 : i32 loc(#loc1199)
        %off_h = arith.remsi %pid_n_77, %arg27 : i32 loc(#loc1200)
        %offset_y = arith.muli %arg28, %arg27 : i32 loc(#loc1201)
        %offset_y_79 = arith.muli %off_z, %offset_y : i32 loc(#loc1202)
        %offset_y_80 = arith.muli %off_h, %arg28 : i32 loc(#loc1203)
        %offset_y_81 = arith.addi %offset_y_79, %offset_y_80 : i32 loc(#loc1204)
        %qo_offset_y = arith.muli %pid_m_78, %c256_i32_72 : i32 loc(#loc1205)
        %qo_offset_y_82 = arith.addi %offset_y_81, %qo_offset_y : i32 loc(#loc1206)
        %mem_83 = ttg.memdesc_index %arg29[%arg58] : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc918)
        %ready_bar = ttg.memdesc_index %arg30[%arg58] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc919)
        %empty_bar = ttg.memdesc_index %arg31[%arg58] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc920)
        ttng.wait_barrier %empty_bar, %arg59, %true_66 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc921)
        %next_index = arith.addi %arg58, %c1_i32_68 : i32 loc(#loc1207)
        %rollover = arith.cmpi eq, %next_index, %c2_i32_67 : i32 loc(#loc1208)
        %index = arith.select %rollover, %c0_i32_71, %next_index : i32 loc(#loc1209)
        %phase = arith.xori %arg59, %c1_i32_68 : i32 loc(#loc1210)
        %phase_84 = arith.select %rollover, %phase, %arg59 : i32 loc(#loc1211)
        ttng.barrier_expect %ready_bar, 16384, %true_66 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc523)
        ttng.async_tma_copy_global_to_local %arg53[%qo_offset_y_82, %c0_i32_71] %mem_83, %ready_bar, %true_66 : !tt.tensordesc<tensor<128x64xbf16, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc524)
        %mem_85 = ttg.memdesc_index %arg32[%arg60] : !ttg.memdesc<6x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64> loc(#loc923)
        %ready_bar_86 = ttg.memdesc_index %arg33[%arg60] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc924)
        %empty_bar_87 = ttg.memdesc_index %arg34[%arg60] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc925)
        ttng.wait_barrier %empty_bar_87, %arg61, %true_66 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc926)
        %next_index_88 = arith.addi %arg60, %c1_i32_68 : i32 loc(#loc1212)
        %rollover_89 = arith.cmpi eq, %next_index_88, %c6_i32 : i32 loc(#loc1213)
        %index_90 = arith.select %rollover_89, %c0_i32_71, %next_index_88 : i32 loc(#loc1214)
        %phase_91 = arith.xori %arg61, %c1_i32_68 : i32 loc(#loc1215)
        %phase_92 = arith.select %rollover_89, %phase_91, %arg61 : i32 loc(#loc1216)
        ttng.barrier_expect %ready_bar_86, 16384, %true_66 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc526)
        ttng.async_tma_copy_global_to_local %arg54[%offset_y_81, %c0_i32_71] %mem_85, %ready_bar_86, %true_66 : !tt.tensordesc<tensor<128x64xbf16, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64> loc(#loc527)
        %q1_offset = arith.addi %qo_offset_y_82, %c128_i32_70 : i32 loc(#loc528)
        %mem_93 = ttg.memdesc_index %arg29[%index] : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc928)
        %ready_bar_94 = ttg.memdesc_index %arg30[%index] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc929)
        %empty_bar_95 = ttg.memdesc_index %arg31[%index] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc930)
        ttng.wait_barrier %empty_bar_95, %phase_84, %true_66 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc931)
        %next_index_96 = arith.addi %index, %c1_i32_68 : i32 loc(#loc1217)
        %rollover_97 = arith.cmpi eq, %next_index_96, %c2_i32_67 : i32 loc(#loc1218)
        %index_98 = arith.select %rollover_97, %c0_i32_71, %next_index_96 : i32 loc(#loc1219)
        %phase_99 = arith.xori %phase_84, %c1_i32_68 : i32 loc(#loc1220)
        %phase_100 = arith.select %rollover_97, %phase_99, %phase_84 : i32 loc(#loc1221)
        ttng.barrier_expect %ready_bar_94, 16384, %true_66 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc530)
        ttng.async_tma_copy_global_to_local %arg53[%q1_offset, %c0_i32_71] %mem_93, %ready_bar_94, %true_66 : !tt.tensordesc<tensor<128x64xbf16, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc531)
        %mem_101 = ttg.memdesc_index %arg32[%index_90] : !ttg.memdesc<6x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64> loc(#loc933)
        %ready_bar_102 = ttg.memdesc_index %arg33[%index_90] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc934)
        %empty_bar_103 = ttg.memdesc_index %arg34[%index_90] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc935)
        ttng.wait_barrier %empty_bar_103, %phase_92, %true_66 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc936)
        %next_index_104 = arith.addi %index_90, %c1_i32_68 : i32 loc(#loc1222)
        %rollover_105 = arith.cmpi eq, %next_index_104, %c6_i32 : i32 loc(#loc1223)
        %index_106 = arith.select %rollover_105, %c0_i32_71, %next_index_104 : i32 loc(#loc1224)
        %phase_107 = arith.xori %phase_92, %c1_i32_68 : i32 loc(#loc1225)
        %phase_108 = arith.select %rollover_105, %phase_107, %phase_92 : i32 loc(#loc1226)
        ttng.barrier_expect %ready_bar_102, 16384, %true_66 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc533)
        ttng.async_tma_copy_global_to_local %arg55[%offset_y_81, %c0_i32_71] %mem_101, %ready_bar_102, %true_66 : !tt.tensordesc<tensor<128x64xbf16, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64> loc(#loc534)
        %v_bar:2 = scf.for %v_bar_109 = %c128_i32_70 to %arg28 step %c128_i32_70 iter_args(%index_110 = %index_106, %phase_111 = %phase_108) -> (i32, i32)  : i32 {
          %offsetkv_y = arith.addi %offset_y_81, %v_bar_109 : i32 loc(#loc536)
          %mem_112 = ttg.memdesc_index %arg32[%index_110] : !ttg.memdesc<6x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64> loc(#loc939)
          %ready_bar_113 = ttg.memdesc_index %arg33[%index_110] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc940)
          %empty_bar_114 = ttg.memdesc_index %arg34[%index_110] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc941)
          ttng.wait_barrier %empty_bar_114, %phase_111, %true_66 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc942)
          %next_index_115 = arith.addi %index_110, %c1_i32_68 : i32 loc(#loc1228)
          %rollover_116 = arith.cmpi eq, %next_index_115, %c6_i32 : i32 loc(#loc1229)
          %index_117 = arith.select %rollover_116, %c0_i32_71, %next_index_115 : i32 loc(#loc1230)
          %phase_118 = arith.xori %phase_111, %c1_i32_68 : i32 loc(#loc1231)
          %phase_119 = arith.select %rollover_116, %phase_118, %phase_111 : i32 loc(#loc1232)
          ttng.barrier_expect %ready_bar_113, 16384, %true_66 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc538)
          ttng.async_tma_copy_global_to_local %arg54[%offsetkv_y, %c0_i32_71] %mem_112, %ready_bar_113, %true_66 : !tt.tensordesc<tensor<128x64xbf16, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64> loc(#loc539)
          %mem_120 = ttg.memdesc_index %arg32[%index_117] : !ttg.memdesc<6x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64> loc(#loc944)
          %ready_bar_121 = ttg.memdesc_index %arg33[%index_117] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc945)
          %empty_bar_122 = ttg.memdesc_index %arg34[%index_117] : !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc946)
          ttng.wait_barrier %empty_bar_122, %phase_119, %true_66 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc947)
          %next_index_123 = arith.addi %index_117, %c1_i32_68 : i32 loc(#loc1233)
          %rollover_124 = arith.cmpi eq, %next_index_123, %c6_i32 : i32 loc(#loc1234)
          %index_125 = arith.select %rollover_124, %c0_i32_71, %next_index_123 : i32 loc(#loc1235)
          %phase_126 = arith.xori %phase_119, %c1_i32_68 : i32 loc(#loc1236)
          %phase_127 = arith.select %rollover_124, %phase_126, %phase_119 : i32 loc(#loc1237)
          ttng.barrier_expect %ready_bar_121, 16384, %true_66 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc541)
          ttng.async_tma_copy_global_to_local %arg55[%offsetkv_y, %c0_i32_71] %mem_120, %ready_bar_121, %true_66 : !tt.tensordesc<tensor<128x64xbf16, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 6x128x64> loc(#loc542)
          scf.yield %index_125, %phase_127 : i32, i32 loc(#loc270)
        } loc(#loc1418)
        scf.yield %index_98, %phase_100, %v_bar#0, %v_bar#1 : i32, i32, i32, i32 loc(#loc271)
      } loc(#loc1417)
      ttg.warp_return loc(#loc)
    }
    partition4(%arg25: f32 loc(unknown), %arg26: i32 loc(unknown), %arg27: i32 loc(unknown), %arg28: i32 loc(unknown), %arg29: !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(unknown), %arg30: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg31: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg32: !ttg.memdesc<6x128x64xbf16, #shared, #smem, mutable> loc(unknown), %arg33: !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> loc(unknown), %arg34: !ttg.memdesc<6x1xi64, #shared1, #smem, mutable> loc(unknown), %arg35: !ttg.memdesc<2x128x64xf32, #tmem, #ttng.tensor_memory, mutable> loc(unknown), %arg36: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg37: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg38: !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(unknown), %arg39: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg40: !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> loc(unknown), %arg41: !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> loc(unknown), %arg42: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg43: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg44: !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable> loc(unknown), %arg45: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg46: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg47: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg48: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg49: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg50: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg51: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg52: !ttg.memdesc<1x1xi64, #shared1, #smem, mutable> loc(unknown), %arg53: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown), %arg54: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown), %arg55: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown), %arg56: !tt.tensordesc<tensor<128x64xbf16, #shared>> loc(unknown)) num_warps(1) {
      %c2_i32_66 = arith.constant 2 : i32 loc(#loc)
      %c1_i32_67 = arith.constant 1 : i32 loc(#loc)
      %c148_i32_68 = arith.constant 148 : i32 loc(#loc272)
      %true_69 = arith.constant true loc(#loc)
      %c128_i32_70 = arith.constant 128 : i32 loc(#loc)
      %c0_i32_71 = arith.constant 0 : i32 loc(#loc)
      %num_pid_m = arith.constant 255 : i32 loc(#loc1238)
      %c256_i32_72 = arith.constant 256 : i32 loc(#loc)
      %start_pid = tt.get_program_id x : i32 loc(#loc950)
      %num_pid_m_73 = arith.addi %arg28, %num_pid_m : i32 loc(#loc1238)
      %num_pid_m_74 = arith.divsi %num_pid_m_73, %c256_i32_72 : i32 loc(#loc1239)
      %num_pid_n = arith.muli %arg26, %arg27 : i32 loc(#loc951)
      %num_tiles = arith.muli %num_pid_m_74, %num_pid_n : i32 loc(#loc952)
      %epi_consumer:2 = scf.for %epi_consumer_75 = %start_pid to %num_tiles step %c148_i32_68 iter_args(%arg58 = %c0_i32_71, %arg59 = %c0_i32_71) -> (i32, i32)  : i32 {
        %group_id = arith.divsi %epi_consumer_75, %num_pid_m_74 : i32 loc(#loc954)
        %group_size_n = arith.subi %num_pid_n, %group_id : i32 loc(#loc955)
        %group_size_n_76 = arith.minsi %group_size_n, %c1_i32_67 : i32 loc(#loc956)
        %pid_n = arith.remsi %epi_consumer_75, %group_size_n_76 : i32 loc(#loc957)
        %pid_n_77 = arith.addi %group_id, %pid_n : i32 loc(#loc958)
        %pid_m = arith.remsi %epi_consumer_75, %num_pid_m_74 : i32 loc(#loc959)
        %pid_m_78 = arith.divsi %pid_m, %group_size_n_76 : i32 loc(#loc960)
        %off_z = arith.divsi %pid_n_77, %arg27 : i32 loc(#loc1241)
        %off_h = arith.remsi %pid_n_77, %arg27 : i32 loc(#loc1242)
        %offset_y = arith.muli %arg28, %arg27 : i32 loc(#loc1243)
        %offset_y_79 = arith.muli %off_z, %offset_y : i32 loc(#loc1244)
        %offset_y_80 = arith.muli %off_h, %arg28 : i32 loc(#loc1245)
        %offset_y_81 = arith.addi %offset_y_79, %offset_y_80 : i32 loc(#loc1246)
        %qo_offset_y = arith.muli %pid_m_78, %c256_i32_72 : i32 loc(#loc1247)
        %qo_offset_y_82 = arith.addi %offset_y_81, %qo_offset_y : i32 loc(#loc1248)
        %mem_83 = ttg.memdesc_index %arg38[%arg58] : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc962)
        %ready_bar = ttg.memdesc_index %arg39[%arg58] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc963)
        %empty_bar = ttg.memdesc_index %arg40[%arg58] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc964)
        ttng.wait_barrier %ready_bar, %arg59, %true_69 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc965)
        %next_index = arith.addi %arg58, %c1_i32_67 : i32 loc(#loc1249)
        %rollover = arith.cmpi eq, %next_index, %c2_i32_66 : i32 loc(#loc1250)
        %index = arith.select %rollover, %c0_i32_71, %next_index : i32 loc(#loc1251)
        %phase = arith.xori %arg59, %c1_i32_67 : i32 loc(#loc1252)
        %phase_84 = arith.select %rollover, %phase, %arg59 : i32 loc(#loc1253)
        ttng.async_tma_copy_local_to_global %arg56[%qo_offset_y_82, %c0_i32_71] %mem_83 : !tt.tensordesc<tensor<128x64xbf16, #shared>>, !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc276)
        %mem_85 = ttg.memdesc_index %arg38[%index] : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc967)
        %ready_bar_86 = ttg.memdesc_index %arg39[%index] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc968)
        %empty_bar_87 = ttg.memdesc_index %arg40[%index] : !ttg.memdesc<2x1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc969)
        ttng.wait_barrier %ready_bar_86, %phase_84, %true_69 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc970)
        %next_index_88 = arith.addi %index, %c1_i32_67 : i32 loc(#loc1254)
        %rollover_89 = arith.cmpi eq, %next_index_88, %c2_i32_66 : i32 loc(#loc1255)
        %index_90 = arith.select %rollover_89, %c0_i32_71, %next_index_88 : i32 loc(#loc1256)
        %phase_91 = arith.xori %phase_84, %c1_i32_67 : i32 loc(#loc1257)
        %phase_92 = arith.select %rollover_89, %phase_91, %phase_84 : i32 loc(#loc1258)
        %0 = arith.addi %qo_offset_y_82, %c128_i32_70 : i32 loc(#loc278)
        ttng.async_tma_copy_local_to_global %arg56[%0, %c0_i32_71] %mem_85 : !tt.tensordesc<tensor<128x64xbf16, #shared>>, !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc279)
        ttng.async_tma_store_wait {pendings = 1 : i32} loc(#loc280)
        ttng.arrive_barrier %empty_bar, 1, %true_69 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc281)
        ttng.async_tma_store_wait {pendings = 0 : i32} loc(#loc282)
        ttng.arrive_barrier %empty_bar_87, 1, %true_69 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc283)
        scf.yield %index_90, %phase_92 : i32, i32 loc(#loc284)
      } loc(#loc1378)
      ttg.warp_return loc(#loc)
    } : (f32, i32, i32, i32, !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable>, !ttg.memdesc<2x1xi64, #shared1, #smem, mutable>, !ttg.memdesc<2x1xi64, #shared1, #smem, mutable>, !ttg.memdesc<6x128x64xbf16, #shared, #smem, mutable>, !ttg.memdesc<6x1xi64, #shared1, #smem, mutable>, !ttg.memdesc<6x1xi64, #shared1, #smem, mutable>, !ttg.memdesc<2x128x64xf32, #tmem, #ttng.tensor_memory, mutable>, !ttg.memdesc<2x1xi64, #shared1, #smem, mutable>, !ttg.memdesc<2x1xi64, #shared1, #smem, mutable>, !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable>, !ttg.memdesc<2x1xi64, #shared1, #smem, mutable>, !ttg.memdesc<2x1xi64, #shared1, #smem, mutable>, !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable>, !ttg.memdesc<1x1xi64, #shared1, #smem, mutable>, !ttg.memdesc<1x1xi64, #shared1, #smem, mutable>, !ttg.memdesc<1x128x128xf32, #tmem1, #ttng.tensor_memory, mutable>, !ttg.memdesc<1x1xi64, #shared1, #smem, mutable>, !ttg.memdesc<1x1xi64, #shared1, #smem, mutable>, !ttg.memdesc<1x1xi64, #shared1, #smem, mutable>, !ttg.memdesc<1x1xi64, #shared1, #smem, mutable>, !ttg.memdesc<1x1xi64, #shared1, #smem, mutable>, !ttg.memdesc<1x1xi64, #shared1, #smem, mutable>, !ttg.memdesc<1x1xi64, #shared1, #smem, mutable>, !ttg.memdesc<1x1xi64, #shared1, #smem, mutable>, !tt.tensordesc<tensor<128x64xbf16, #shared>>, !tt.tensordesc<tensor<128x64xbf16, #shared>>, !tt.tensordesc<tensor<128x64xbf16, #shared>>, !tt.tensordesc<tensor<128x64xbf16, #shared>>) -> () loc(#loc)
    ttg.local_dealloc %mem : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(#loc548)
    ttng.inval_barrier %q_chnl : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc549)
    ttng.inval_barrier %q_chnl_17 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc550)
    ttng.inval_barrier %q_chnl_18 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc549)
    ttng.inval_barrier %q_chnl_19 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc550)
    ttg.local_dealloc %mem_20 : !ttg.memdesc<6x128x64xbf16, #shared, #smem, mutable> loc(#loc551)
    ttng.inval_barrier %kv_chnl : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc552)
    ttng.inval_barrier %kv_chnl_23 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc553)
    ttng.inval_barrier %kv_chnl_24 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc552)
    ttng.inval_barrier %kv_chnl_25 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc553)
    ttng.inval_barrier %kv_chnl_26 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc552)
    ttng.inval_barrier %kv_chnl_27 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc553)
    ttng.inval_barrier %kv_chnl_28 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc552)
    ttng.inval_barrier %kv_chnl_29 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc553)
    ttng.inval_barrier %kv_chnl_30 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc552)
    ttng.inval_barrier %kv_chnl_31 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc553)
    ttng.inval_barrier %kv_chnl_32 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc552)
    ttng.inval_barrier %kv_chnl_33 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 6x1> loc(#loc553)
    ttng.inval_barrier %o_chnl : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc554)
    ttng.inval_barrier %o_chnl_37 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc555)
    ttng.inval_barrier %o_chnl_38 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc554)
    ttng.inval_barrier %o_chnl_39 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc555)
    ttg.local_dealloc %mem_40 : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(#loc556)
    ttng.inval_barrier %epi_chnl : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc557)
    ttng.inval_barrier %epi_chnl_43 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc558)
    ttng.inval_barrier %epi_chnl_44 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc557)
    ttng.inval_barrier %epi_chnl_45 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 2x1> loc(#loc558)
    ttng.inval_barrier %s0_chnl : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc559)
    ttng.inval_barrier %s0_chnl_49 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc560)
    ttng.inval_barrier %s1_chnl : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc561)
    ttng.inval_barrier %s1_chnl_53 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc562)
    ttg.local_dealloc %mem_54 : !ttg.memdesc<1x1xi8, #shared1, #smem, mutable> loc(#loc563)
    ttng.inval_barrier %c0_chnl : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc564)
    ttng.inval_barrier %c0_chnl_57 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc565)
    ttg.local_dealloc %mem_58 : !ttg.memdesc<1x1xi8, #shared1, #smem, mutable> loc(#loc566)
    ttng.inval_barrier %c1_chnl : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc567)
    ttng.inval_barrier %c1_chnl_61 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc568)
    ttg.local_dealloc %mem_62 : !ttg.memdesc<1x1xi8, #shared1, #smem, mutable> loc(#loc569)
    ttng.inval_barrier %exp_turnstile : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc570)
    ttng.inval_barrier %exp_turnstile_65 : !ttg.memdesc<1xi64, #shared1, #smem, mutable, 1x1> loc(#loc571)
    tt.return loc(#loc296)
  } loc(#loc1)
} loc(#loc)
#loc2 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1183:26)
#loc3 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":95:49)
#loc4 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":194:48)
#loc5 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1199:30)
#loc6 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":97:36)
#loc7 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":100:36)
#loc8 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":103:39)
#loc9 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":103:22)
#loc10 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":104:39)
#loc11 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":104:22)
#loc12 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":105:24)
#loc13 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1200:31)
#loc14 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1202:36)
#loc15 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1205:38)
#loc16 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1208:37)
#loc17 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1211:37)
#loc18 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1214:22)
#loc19 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1217:22)
#loc20 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1220:22)
#loc21 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1120:32)
#loc22 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1121:32)
#loc23 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":367:30)
#loc24 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1128:40)
#loc25 = loc("/home/jieeliu/workspace/fb-triton/python/triton/language/standard.py":41:22)
#loc26 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":368:38)
#loc27 = loc("/home/jieeliu/workspace/fb-triton/python/triton/language/standard.py":41:28)
#loc28 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":369:27)
#loc29 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":371:28)
#loc30 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1129:63)
#loc31 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":378:26)
#loc32 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1130:37)
#loc33 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":380:40)
#loc34 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":380:53)
#loc35 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":381:37)
#loc36 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":381:27)
#loc37 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":382:23)
#loc38 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":382:49)
#loc39 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1132:39)
#loc40 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":122:38)
#loc41 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":174:51)
#loc42 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1134:39)
#loc43 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":123:38)
#loc44 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":125:29)
#loc45 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":63:60)
#loc46 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":175:34)
#loc47 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1135:24)
#loc48 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1136:39)
#loc49 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1137:24)
#loc50 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1139:41)
#loc51 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1139:23)
#loc52 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":121:25)
#loc53 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1036:32)
#loc54 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1141:49)
#loc55 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1038:33)
#loc56 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":545:51)
#loc57 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1039:39)
#loc58 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":547:68)
#loc59 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1039:52)
#loc60 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1040:20)
#loc61 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1041:44)
#loc62 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1041:63)
#loc63 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1044:49)
#loc64 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1045:23)
#loc65 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1046:32)
#loc66 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":463:8)
#loc67 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1046:26)
#loc68 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1047:20)
#loc69 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1048:20)
#loc70 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1144:49)
#loc71 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":67:44)
#loc72 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1143:12)
#loc73 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1058:33)
#loc74 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1148:68)
#loc75 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":552:53)
#loc76 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1059:56)
#loc77 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":553:53)
#loc78 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":555:70)
#loc79 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":556:70)
#loc80 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1060:24)
#loc81 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1060:56)
#loc82 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1061:33)
#loc83 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1062:24)
#loc84 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1062:56)
#loc85 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1063:33)
#loc86 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1064:20)
#loc87 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":111:25)
#loc88 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":159:51)
#loc89 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1066:36)
#loc90 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":112:38)
#loc91 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":113:38)
#loc92 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":115:29)
#loc93 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1067:32)
#loc94 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1085:16)
#loc95 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1087:42)
#loc96 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1088:23)
#loc97 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1089:32)
#loc98 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1089:26)
#loc99 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1090:34)
#loc100 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1090:61)
#loc101 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1090:56)
#loc102 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1092:4)
#loc103 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1093:20)
#loc104 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1094:20)
#loc105 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1096:19)
#loc106 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1096:11)
#loc107 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1098:28)
#loc108 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1099:64)
#loc109 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1099:14)
#loc110 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1100:31)
#loc111 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1100:17)
#loc112 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1100:46)
#loc113 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1101:44)
#loc114 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1101:21)
#loc115 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1151:68)
#loc116 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":160:34)
#loc117 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1150:8)
#loc119 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":890:40)
#loc120 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":891:63)
#loc121 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":888:33)
#loc122 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":808:33)
#loc124 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":809:36)
#loc125 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":787:44)
#loc126 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":810:39)
#loc127 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":787:55)
#loc128 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":594:24)
#loc129 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":788:19)
#loc130 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":594:42)
#loc131 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":594:53)
#loc132 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":595:36)
#loc133 = loc("/home/jieeliu/workspace/fb-triton/python/triton/language/standard.py":189:40)
#loc135 = loc("/home/jieeliu/workspace/fb-triton/python/triton/language/standard.py":168:27)
#loc136 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":816:47)
#loc137 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":816:31)
#loc138 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":817:30)
#loc139 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":817:24)
#loc140 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":819:48)
#loc141 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":821:48)
#loc142 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":821:52)
#loc143 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":821:12)
#loc144 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":823:24)
#loc145 = loc("/home/jieeliu/workspace/fb-triton/python/triton/experimental/gluon/language/_standard.py":62:8)
#loc146 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":828:49)
#loc147 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":828:32)
#loc148 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":829:38)
#loc149 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":829:33)
#loc150 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":443:8)
#loc151 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":829:32)
#loc152 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":834:40)
#loc153 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":540:62)
#loc154 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":839:40)
#loc155 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":573:27)
#loc156 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":770:23)
#loc157 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":840:48)
#loc158 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":573:75)
#loc159 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":573:17)
#loc160 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":574:35)
#loc161 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":575:35)
#loc162 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":576:28)
#loc163 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":576:62)
#loc164 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":773:20)
#loc165 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":774:31)
#loc166 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":774:48)
#loc167 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":774:43)
#loc168 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":591:21)
#loc169 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":776:19)
#loc170 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":592:21)
#loc171 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":842:24)
#loc172 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":843:37)
#loc173 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":846:28)
#loc174 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":849:30)
#loc175 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":850:37)
#loc176 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":504:8)
#loc177 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":853:45)
#loc178 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":857:30)
#loc179 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":857:38)
#loc180 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":858:30)
#loc181 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":858:38)
#loc182 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":863:8)
#loc183 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":943:25)
#loc184 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":947:36)
#loc185 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":948:60)
#loc186 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":949:57)
#loc187 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":949:61)
#loc188 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":949:23)
#loc189 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":950:57)
#loc190 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":950:61)
#loc191 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":950:23)
#loc192 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":952:24)
#loc193 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":953:37)
#loc194 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":955:24)
#loc195 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":955:8)
#loc197 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":667:63)
#loc198 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":666:40)
#loc199 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":670:32)
#loc200 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":672:38)
#loc201 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":64:30)
#loc202 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":65:29)
#loc203 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":66:34)
#loc204 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":67:47)
#loc205 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":673:37)
#loc206 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":674:39)
#loc207 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":676:36)
#loc208 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":676:45)
#loc209 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":679:38)
#loc210 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":680:39)
#loc211 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":684:12)
#loc212 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":689:37)
#loc213 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":690:38)
#loc214 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":691:39)
#loc215 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":539:29)
#loc216 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":692:41)
#loc217 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":693:37)
#loc218 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":696:34)
#loc219 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":696:23)
#loc220 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":697:41)
#loc221 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":700:31)
#loc222 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":701:16)
#loc223 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":706:42)
#loc224 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":707:43)
#loc225 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":708:45)
#loc226 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":710:33)
#loc227 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":717:16)
#loc228 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":722:41)
#loc229 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":723:42)
#loc230 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":724:43)
#loc231 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":725:45)
#loc232 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":726:41)
#loc233 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":726:12)
#loc234 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":728:23)
#loc235 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":729:23)
#loc236 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":731:38)
#loc237 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":732:39)
#loc238 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":733:41)
#loc239 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":737:12)
#loc240 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":734:8)
#loc241 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":617:63)
#loc242 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":616:40)
#loc243 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":618:37)
#loc244 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":341:22)
#loc245 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":383:42)
#loc246 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":342:21)
#loc247 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":344:37)
#loc248 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":344:24)
#loc249 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":344:55)
#loc250 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":344:47)
#loc251 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":345:39)
#loc252 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":345:29)
#loc253 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":622:38)
#loc254 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":200:25)
#loc255 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":623:54)
#loc256 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":201:60)
#loc257 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":626:37)
#loc258 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":627:52)
#loc259 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":629:39)
#loc260 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":630:38)
#loc261 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":631:54)
#loc262 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":633:37)
#loc263 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":634:52)
#loc264 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":636:54)
#loc265 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":637:41)
#loc266 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":638:41)
#loc267 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":639:56)
#loc268 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":640:41)
#loc269 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":641:56)
#loc270 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":641:12)
#loc271 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":636:8)
#loc272 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1013:63)
#loc273 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1012:40)
#loc274 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1014:37)
#loc275 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1016:40)
#loc276 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1018:64)
#loc277 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1021:40)
#loc278 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1023:40)
#loc279 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1023:64)
#loc280 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1026:23)
#loc281 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1027:24)
#loc282 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1028:23)
#loc283 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1029:24)
#loc284 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1029:8)
#loc285 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":143:8)
#loc286 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1250:4)
#loc287 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":145:28)
#loc288 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":146:28)
#loc289 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1251:4)
#loc290 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1252:4)
#loc291 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1253:4)
#loc292 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1254:4)
#loc293 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1255:4)
#loc294 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1256:4)
#loc295 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1257:4)
#loc296 = loc("/home/jieeliu/workspace/tritonbench/tritonbench/kernels/gluon_attention_persistent_forward.py":1258:4)
#loc306 = loc("qk_scale"(#loc2))
#loc307 = loc("mem"(#loc3))
#loc308 = loc("q_chnl"(#loc5))
#loc309 = loc("ready_bars"(#loc6))
#loc310 = loc("empty_bars"(#loc7))
#loc311 = loc("kv_chnl"(#loc13))
#loc312 = loc("o_chnl"(#loc14))
#loc313 = loc("epi_chnl"(#loc15))
#loc314 = loc("s0_chnl"(#loc16))
#loc315 = loc("s1_chnl"(#loc17))
#loc316 = loc("c0_chnl"(#loc18))
#loc317 = loc("c1_chnl"(#loc19))
#loc318 = loc("exp_turnstile"(#loc20))
#loc319 = loc("s0_tmem"(#loc21))
#loc320 = loc("s1_tmem"(#loc22))
#loc321 = loc("start_pid"(#loc23))
#loc322 = loc("scheduler"(#loc24))
#loc323 = loc("num_pid_m"(#loc26))
#loc324 = loc("num_pid_n"(#loc28))
#loc325 = loc("num_tiles"(#loc29))
#loc326 = loc("corr0_consumer"(#loc30))
#loc327 = loc("group_id"(#loc31))
#loc328 = loc("prog"(#loc32))
#loc329 = loc("group_size_n"(#loc33))
#loc330 = loc("group_size_n"(#loc34))
#loc331 = loc("pid_n"(#loc35))
#loc332 = loc("pid_n"(#loc36))
#loc333 = loc("pid_m"(#loc37))
#loc334 = loc("pid_m"(#loc38))
#loc335 = loc("num_corrections"(#loc39))
#loc336 = loc("ready_bar"(#loc40))
#loc337 = loc(callsite(#loc41 at #loc42))
#loc338 = loc("empty_bar"(#loc43))
#loc339 = loc("next"(#loc46))
#loc340 = loc(callsite(#loc41 at #loc48))
#loc341 = loc("corr0_consumer"(#loc51))
#loc342 = loc("mem"(#loc52))
#loc343 = loc(callsite(#loc53 at #loc54))
#loc344 = loc(callsite(#loc55 at #loc54))
#loc345 = loc("alpha_tmem"(#loc56))
#loc346 = loc("alpha"(#loc57))
#loc347 = loc("alpha"(#loc59))
#loc348 = loc(callsite(#loc60 at #loc54))
#loc349 = loc("alpha"(#loc61))
#loc350 = loc("alpha"(#loc62))
#loc351 = loc("o_ref"(#loc63))
#loc352 = loc("o"(#loc64))
#loc353 = loc("o"(#loc65))
#loc354 = loc("o"(#loc67))
#loc355 = loc(callsite(#loc68 at #loc54))
#loc356 = loc(callsite(#loc69 at #loc54))
#loc357 = loc(callsite(#loc53 at #loc70))
#loc358 = loc("phase"(#loc71))
#loc359 = loc(callsite(#loc55 at #loc70))
#loc360 = loc(callsite(#loc60 at #loc70))
#loc361 = loc(callsite(#loc68 at #loc70))
#loc362 = loc(callsite(#loc69 at #loc70))
#loc363 = loc(callsite(#loc73 at #loc74))
#loc364 = loc("m_i_tmem"(#loc75))
#loc365 = loc(callsite(#loc76 at #loc74))
#loc366 = loc("l_i_tmem"(#loc77))
#loc367 = loc("m_i_tmem"(#loc78))
#loc368 = loc("l_i_tmem"(#loc79))
#loc369 = loc("m_i"(#loc80))
#loc370 = loc("m_i"(#loc81))
#loc371 = loc("m_i"(#loc82))
#loc372 = loc("l_i"(#loc83))
#loc373 = loc("l_i"(#loc84))
#loc374 = loc("l_i"(#loc85))
#loc375 = loc(callsite(#loc86 at #loc74))
#loc376 = loc("mem"(#loc87))
#loc377 = loc(callsite(#loc89 at #loc74))
#loc378 = loc("ready_bar"(#loc90))
#loc379 = loc("empty_bar"(#loc91))
#loc380 = loc(callsite(#loc93 at #loc74))
#loc381 = loc("scale"(#loc94))
#loc382 = loc("o_ref"(#loc95))
#loc383 = loc("o"(#loc96))
#loc384 = loc("o"(#loc97))
#loc385 = loc("o"(#loc98))
#loc386 = loc(callsite(#loc99 at #loc74))
#loc387 = loc(callsite(#loc100 at #loc74))
#loc388 = loc(callsite(#loc101 at #loc74))
#loc389 = loc(callsite(#loc102 at #loc74))
#loc390 = loc(callsite(#loc103 at #loc74))
#loc391 = loc(callsite(#loc104 at #loc74))
#loc392 = loc("m_i"(#loc105))
#loc393 = loc("m_i"(#loc106))
#loc394 = loc("offs_m"(#loc107))
#loc395 = loc("offs_m"(#loc108))
#loc396 = loc("offs_m"(#loc109))
#loc397 = loc("m_ptrs"(#loc110))
#loc398 = loc("m_ptrs"(#loc111))
#loc399 = loc("m_ptrs"(#loc112))
#loc400 = loc(callsite(#loc113 at #loc74))
#loc401 = loc(callsite(#loc114 at #loc74))
#loc402 = loc(callsite(#loc73 at #loc115))
#loc403 = loc(callsite(#loc76 at #loc115))
#loc404 = loc(callsite(#loc86 at #loc115))
#loc405 = loc(callsite(#loc89 at #loc115))
#loc406 = loc("next"(#loc116))
#loc407 = loc(callsite(#loc93 at #loc115))
#loc408 = loc(callsite(#loc99 at #loc115))
#loc409 = loc(callsite(#loc100 at #loc115))
#loc410 = loc(callsite(#loc101 at #loc115))
#loc411 = loc(callsite(#loc102 at #loc115))
#loc412 = loc(callsite(#loc103 at #loc115))
#loc413 = loc(callsite(#loc104 at #loc115))
#loc414 = loc(callsite(#loc113 at #loc115))
#loc415 = loc(callsite(#loc114 at #loc115))
#loc416 = loc(callsite(#loc at #loc118))
#loc417 = loc("scheduler"(#loc119))
#loc418 = loc(callsite(#loc120 at #loc118))
#loc419 = loc(callsite(#loc121 at #loc118))
#loc420 = loc("exp_turnstile"(#loc120))
#loc421 = loc("s_consumer"(#loc122))
#loc423 = loc("qks"(#loc125))
#loc424 = loc("qk"(#loc126))
#loc425 = loc("qks"(#loc127))
#loc426 = loc("x"(#loc128))
#loc427 = loc("x"(#loc130))
#loc428 = loc("x"(#loc131))
#loc430 = loc("m_ij"(#loc136))
#loc431 = loc("m_ij"(#loc137))
#loc432 = loc("alpha"(#loc138))
#loc433 = loc("alpha"(#loc139))
#loc434 = loc("alpha_tmem"(#loc140))
#loc435 = loc("qk"(#loc146))
#loc436 = loc("qk"(#loc147))
#loc437 = loc("qk"(#loc148))
#loc438 = loc("qk"(#loc149))
#loc439 = loc("qk"(#loc151))
#loc440 = loc("p_tmem"(#loc154))
#loc441 = loc("qks"(#loc156))
#loc442 = loc("p"(#loc157))
#loc443 = loc("x0"(#loc160))
#loc444 = loc("x1"(#loc161))
#loc445 = loc("p"(#loc164))
#loc446 = loc("x0"(#loc168))
#loc447 = loc("x1"(#loc170))
#loc448 = loc("alpha"(#loc177))
#loc449 = loc("l_i0"(#loc178))
#loc450 = loc("l_i0"(#loc179))
#loc451 = loc("l_i1"(#loc180))
#loc452 = loc("l_i1"(#loc181))
#loc453 = loc("l_i"(#loc183))
#loc454 = loc(callsite(#loc184 at #loc118))
#loc455 = loc(callsite(#loc185 at #loc118))
#loc456 = loc(callsite(#loc186 at #loc118))
#loc457 = loc(callsite(#loc187 at #loc118))
#loc458 = loc(callsite(#loc188 at #loc118))
#loc459 = loc(callsite(#loc189 at #loc118))
#loc460 = loc(callsite(#loc190 at #loc118))
#loc461 = loc(callsite(#loc191 at #loc118))
#loc462 = loc(callsite(#loc192 at #loc118))
#loc463 = loc(callsite(#loc193 at #loc118))
#loc464 = loc(callsite(#loc194 at #loc118))
#loc465 = loc(callsite(#loc195 at #loc118))
#loc466 = loc(callsite(#loc at #loc196))
#loc467 = loc(callsite(#loc120 at #loc196))
#loc468 = loc(callsite(#loc121 at #loc196))
#loc470 = loc(callsite(#loc184 at #loc196))
#loc471 = loc(callsite(#loc185 at #loc196))
#loc472 = loc(callsite(#loc186 at #loc196))
#loc473 = loc(callsite(#loc187 at #loc196))
#loc474 = loc(callsite(#loc188 at #loc196))
#loc475 = loc(callsite(#loc189 at #loc196))
#loc476 = loc(callsite(#loc190 at #loc196))
#loc477 = loc(callsite(#loc191 at #loc196))
#loc478 = loc(callsite(#loc192 at #loc196))
#loc479 = loc(callsite(#loc193 at #loc196))
#loc480 = loc(callsite(#loc194 at #loc196))
#loc481 = loc(callsite(#loc195 at #loc196))
#loc482 = loc("scheduler"(#loc198))
#loc483 = loc("q_consumer"(#loc197))
#loc484 = loc("num_mmas"(#loc199))
#loc485 = loc(callsite(#loc41 at #loc200))
#loc486 = loc("next_index"(#loc201))
#loc487 = loc("rollover"(#loc202))
#loc488 = loc("index"(#loc203))
#loc489 = loc("phase"(#loc204))
#loc490 = loc(callsite(#loc41 at #loc205))
#loc491 = loc(callsite(#loc88 at #loc206))
#loc492 = loc(callsite(#loc41 at #loc209))
#loc493 = loc(callsite(#loc88 at #loc210))
#loc494 = loc(callsite(#loc41 at #loc212))
#loc495 = loc(callsite(#loc88 at #loc213))
#loc496 = loc(callsite(#loc88 at #loc214))
#loc497 = loc("p_tmem"(#loc215))
#loc498 = loc("p0_tmem"(#loc216))
#loc499 = loc("kv_consumer"(#loc219))
#loc500 = loc(callsite(#loc41 at #loc220))
#loc501 = loc(callsite(#loc88 at #loc223))
#loc502 = loc(callsite(#loc88 at #loc224))
#loc503 = loc("p1_tmem"(#loc225))
#loc504 = loc(callsite(#loc41 at #loc228))
#loc505 = loc(callsite(#loc88 at #loc229))
#loc506 = loc(callsite(#loc88 at #loc230))
#loc507 = loc("p0_tmem"(#loc231))
#loc508 = loc(callsite(#loc88 at #loc236))
#loc509 = loc(callsite(#loc88 at #loc237))
#loc510 = loc("p1_tmem"(#loc238))
#loc511 = loc("scheduler"(#loc242))
#loc512 = loc("q_producer"(#loc241))
#loc513 = loc("prog"(#loc243))
#loc514 = loc("off_z"(#loc244))
#loc515 = loc("off_h"(#loc246))
#loc516 = loc("offset_y"(#loc247))
#loc517 = loc("offset_y"(#loc248))
#loc518 = loc("offset_y"(#loc249))
#loc519 = loc("offset_y"(#loc250))
#loc520 = loc("qo_offset_y"(#loc251))
#loc521 = loc("qo_offset_y"(#loc252))
#loc522 = loc(callsite(#loc88 at #loc253))
#loc523 = loc(callsite(#loc254 at #loc255))
#loc524 = loc(callsite(#loc256 at #loc255))
#loc525 = loc(callsite(#loc88 at #loc257))
#loc526 = loc(callsite(#loc254 at #loc258))
#loc527 = loc(callsite(#loc256 at #loc258))
#loc528 = loc("q1_offset"(#loc259))
#loc529 = loc(callsite(#loc88 at #loc260))
#loc530 = loc(callsite(#loc254 at #loc261))
#loc531 = loc(callsite(#loc256 at #loc261))
#loc532 = loc(callsite(#loc88 at #loc262))
#loc533 = loc(callsite(#loc254 at #loc263))
#loc534 = loc(callsite(#loc256 at #loc263))
#loc535 = loc("kv_producer"(#loc264))
#loc536 = loc("offsetkv_y"(#loc265))
#loc537 = loc(callsite(#loc88 at #loc266))
#loc538 = loc(callsite(#loc254 at #loc267))
#loc539 = loc(callsite(#loc256 at #loc267))
#loc540 = loc(callsite(#loc88 at #loc268))
#loc541 = loc(callsite(#loc254 at #loc269))
#loc542 = loc(callsite(#loc256 at #loc269))
#loc543 = loc("scheduler"(#loc273))
#loc544 = loc("epi_consumer"(#loc272))
#loc545 = loc("prog"(#loc274))
#loc546 = loc(callsite(#loc41 at #loc275))
#loc547 = loc(callsite(#loc41 at #loc277))
#loc548 = loc(callsite(#loc285 at #loc286))
#loc549 = loc(callsite(#loc287 at #loc286))
#loc550 = loc(callsite(#loc288 at #loc286))
#loc551 = loc(callsite(#loc285 at #loc289))
#loc552 = loc(callsite(#loc287 at #loc289))
#loc553 = loc(callsite(#loc288 at #loc289))
#loc554 = loc(callsite(#loc287 at #loc290))
#loc555 = loc(callsite(#loc288 at #loc290))
#loc556 = loc(callsite(#loc285 at #loc291))
#loc557 = loc(callsite(#loc287 at #loc291))
#loc558 = loc(callsite(#loc288 at #loc291))
#loc559 = loc(callsite(#loc287 at #loc292))
#loc560 = loc(callsite(#loc288 at #loc292))
#loc561 = loc(callsite(#loc287 at #loc293))
#loc562 = loc(callsite(#loc288 at #loc293))
#loc563 = loc(callsite(#loc285 at #loc294))
#loc564 = loc(callsite(#loc287 at #loc294))
#loc565 = loc(callsite(#loc288 at #loc294))
#loc566 = loc(callsite(#loc285 at #loc295))
#loc567 = loc(callsite(#loc287 at #loc295))
#loc568 = loc(callsite(#loc288 at #loc295))
#loc569 = loc(callsite(#loc285 at #loc296))
#loc570 = loc(callsite(#loc287 at #loc296))
#loc571 = loc(callsite(#loc288 at #loc296))
#loc572 = loc(callsite(#loc4 at #loc308))
#loc573 = loc(callsite(#loc4 at #loc311))
#loc574 = loc(callsite(#loc307 at #loc312))
#loc575 = loc(callsite(#loc309 at #loc312))
#loc576 = loc(callsite(#loc310 at #loc312))
#loc577 = loc(callsite(#loc8 at #loc312))
#loc578 = loc(callsite(#loc9 at #loc312))
#loc579 = loc(callsite(#loc10 at #loc312))
#loc580 = loc(callsite(#loc11 at #loc312))
#loc581 = loc(callsite(#loc12 at #loc312))
#loc582 = loc(callsite(#loc307 at #loc313))
#loc583 = loc(callsite(#loc309 at #loc313))
#loc584 = loc(callsite(#loc310 at #loc313))
#loc585 = loc(callsite(#loc8 at #loc313))
#loc586 = loc(callsite(#loc9 at #loc313))
#loc587 = loc(callsite(#loc10 at #loc313))
#loc588 = loc(callsite(#loc11 at #loc313))
#loc589 = loc(callsite(#loc12 at #loc313))
#loc590 = loc(callsite(#loc307 at #loc314))
#loc591 = loc(callsite(#loc309 at #loc314))
#loc592 = loc(callsite(#loc310 at #loc314))
#loc593 = loc(callsite(#loc8 at #loc314))
#loc594 = loc(callsite(#loc9 at #loc314))
#loc595 = loc(callsite(#loc10 at #loc314))
#loc596 = loc(callsite(#loc11 at #loc314))
#loc597 = loc(callsite(#loc12 at #loc314))
#loc598 = loc(callsite(#loc307 at #loc315))
#loc599 = loc(callsite(#loc309 at #loc315))
#loc600 = loc(callsite(#loc310 at #loc315))
#loc601 = loc(callsite(#loc8 at #loc315))
#loc602 = loc(callsite(#loc9 at #loc315))
#loc603 = loc(callsite(#loc10 at #loc315))
#loc604 = loc(callsite(#loc11 at #loc315))
#loc605 = loc(callsite(#loc12 at #loc315))
#loc606 = loc(callsite(#loc307 at #loc316))
#loc607 = loc(callsite(#loc309 at #loc316))
#loc608 = loc(callsite(#loc310 at #loc316))
#loc609 = loc(callsite(#loc8 at #loc316))
#loc610 = loc(callsite(#loc9 at #loc316))
#loc611 = loc(callsite(#loc10 at #loc316))
#loc612 = loc(callsite(#loc11 at #loc316))
#loc613 = loc(callsite(#loc12 at #loc316))
#loc614 = loc(callsite(#loc307 at #loc317))
#loc615 = loc(callsite(#loc309 at #loc317))
#loc616 = loc(callsite(#loc310 at #loc317))
#loc617 = loc(callsite(#loc8 at #loc317))
#loc618 = loc(callsite(#loc9 at #loc317))
#loc619 = loc(callsite(#loc10 at #loc317))
#loc620 = loc(callsite(#loc11 at #loc317))
#loc621 = loc(callsite(#loc12 at #loc317))
#loc622 = loc(callsite(#loc307 at #loc318))
#loc623 = loc(callsite(#loc309 at #loc318))
#loc624 = loc(callsite(#loc310 at #loc318))
#loc625 = loc(callsite(#loc8 at #loc318))
#loc626 = loc(callsite(#loc9 at #loc318))
#loc627 = loc(callsite(#loc10 at #loc318))
#loc628 = loc(callsite(#loc11 at #loc318))
#loc629 = loc(callsite(#loc12 at #loc318))
#loc630 = loc(callsite(#loc321 at #loc322))
#loc631 = loc(callsite(#loc323 at #loc322))
#loc632 = loc(callsite(#loc324 at #loc322))
#loc633 = loc(callsite(#loc325 at #loc322))
#loc634 = loc("corr0_consumer"(#loc326))
#loc635 = loc(callsite(#loc327 at #loc328))
#loc636 = loc(callsite(#loc329 at #loc328))
#loc637 = loc(callsite(#loc330 at #loc328))
#loc638 = loc(callsite(#loc331 at #loc328))
#loc639 = loc(callsite(#loc332 at #loc328))
#loc640 = loc(callsite(#loc333 at #loc328))
#loc641 = loc(callsite(#loc334 at #loc328))
#loc642 = loc(callsite(#loc336 at #loc337))
#loc643 = loc(callsite(#loc338 at #loc337))
#loc644 = loc(callsite(#loc44 at #loc337))
#loc645 = loc(callsite(#loc339 at #loc42))
#loc646 = loc(callsite(#loc336 at #loc340))
#loc647 = loc(callsite(#loc338 at #loc340))
#loc648 = loc(callsite(#loc44 at #loc340))
#loc649 = loc(callsite(#loc339 at #loc48))
#loc650 = loc("corr0_consumer"(#loc341))
#loc651 = loc(callsite(#loc41 at #loc343))
#loc652 = loc(callsite(#loc41 at #loc344))
#loc653 = loc(callsite(#loc339 at #loc344))
#loc654 = loc(callsite(#loc346 at #loc54))
#loc655 = loc(callsite(#loc347 at #loc54))
#loc656 = loc(callsite(#loc349 at #loc54))
#loc657 = loc(callsite(#loc350 at #loc54))
#loc658 = loc(callsite(#loc351 at #loc54))
#loc659 = loc(callsite(#loc352 at #loc54))
#loc660 = loc(callsite(#loc353 at #loc54))
#loc661 = loc(callsite(#loc354 at #loc54))
#loc662 = loc(callsite(#loc41 at #loc357))
#loc663 = loc(callsite(#loc339 at #loc357))
#loc664 = loc(callsite(#loc41 at #loc359))
#loc665 = loc(callsite(#loc339 at #loc359))
#loc666 = loc(callsite(#loc346 at #loc70))
#loc667 = loc(callsite(#loc347 at #loc70))
#loc668 = loc(callsite(#loc349 at #loc70))
#loc669 = loc(callsite(#loc350 at #loc70))
#loc670 = loc(callsite(#loc351 at #loc70))
#loc671 = loc(callsite(#loc352 at #loc70))
#loc672 = loc(callsite(#loc353 at #loc70))
#loc673 = loc(callsite(#loc354 at #loc70))
#loc674 = loc(callsite(#loc41 at #loc363))
#loc675 = loc(callsite(#loc339 at #loc363))
#loc676 = loc(callsite(#loc364 at #loc365))
#loc677 = loc(callsite(#loc366 at #loc365))
#loc678 = loc(callsite(#loc367 at #loc365))
#loc679 = loc(callsite(#loc368 at #loc365))
#loc680 = loc(callsite(#loc369 at #loc74))
#loc681 = loc(callsite(#loc370 at #loc74))
#loc682 = loc(callsite(#loc371 at #loc74))
#loc683 = loc(callsite(#loc372 at #loc74))
#loc684 = loc(callsite(#loc373 at #loc74))
#loc685 = loc(callsite(#loc374 at #loc74))
#loc686 = loc(callsite(#loc88 at #loc377))
#loc687 = loc(callsite(#loc41 at #loc380))
#loc688 = loc(callsite(#loc381 at #loc74))
#loc689 = loc(callsite(#loc382 at #loc74))
#loc690 = loc(callsite(#loc383 at #loc74))
#loc691 = loc(callsite(#loc384 at #loc74))
#loc692 = loc(callsite(#loc385 at #loc74))
#loc693 = loc(callsite(#loc392 at #loc74))
#loc694 = loc(callsite(#loc393 at #loc74))
#loc695 = loc(callsite(#loc394 at #loc74))
#loc696 = loc(callsite(#loc395 at #loc74))
#loc697 = loc(callsite(#loc396 at #loc74))
#loc698 = loc(callsite(#loc397 at #loc74))
#loc699 = loc(callsite(#loc398 at #loc74))
#loc700 = loc(callsite(#loc399 at #loc74))
#loc701 = loc(callsite(#loc41 at #loc402))
#loc702 = loc(callsite(#loc339 at #loc402))
#loc703 = loc(callsite(#loc364 at #loc403))
#loc704 = loc(callsite(#loc366 at #loc403))
#loc705 = loc(callsite(#loc367 at #loc403))
#loc706 = loc(callsite(#loc368 at #loc403))
#loc707 = loc(callsite(#loc369 at #loc115))
#loc708 = loc(callsite(#loc370 at #loc115))
#loc709 = loc(callsite(#loc371 at #loc115))
#loc710 = loc(callsite(#loc372 at #loc115))
#loc711 = loc(callsite(#loc373 at #loc115))
#loc712 = loc(callsite(#loc374 at #loc115))
#loc713 = loc(callsite(#loc88 at #loc405))
#loc714 = loc(callsite(#loc406 at #loc405))
#loc715 = loc(callsite(#loc41 at #loc407))
#loc716 = loc(callsite(#loc339 at #loc407))
#loc717 = loc(callsite(#loc381 at #loc115))
#loc718 = loc(callsite(#loc382 at #loc115))
#loc719 = loc(callsite(#loc383 at #loc115))
#loc720 = loc(callsite(#loc384 at #loc115))
#loc721 = loc(callsite(#loc385 at #loc115))
#loc722 = loc(callsite(#loc392 at #loc115))
#loc723 = loc(callsite(#loc393 at #loc115))
#loc724 = loc(callsite(#loc417 at #loc118))
#loc725 = loc(callsite(#loc88 at #loc419))
#loc726 = loc("exp_turnstile"(#loc420))
#loc727 = loc("s_consumer"(#loc421))
#loc728 = loc(callsite(#loc124 at #loc422))
#loc729 = loc(callsite(#loc424 at #loc422))
#loc731 = loc(callsite(#loc430 at #loc422))
#loc732 = loc(callsite(#loc431 at #loc422))
#loc733 = loc(callsite(#loc432 at #loc422))
#loc734 = loc(callsite(#loc433 at #loc422))
#loc735 = loc(callsite(#loc434 at #loc422))
#loc736 = loc(callsite(#loc141 at #loc422))
#loc737 = loc(callsite(#loc142 at #loc422))
#loc738 = loc(callsite(#loc143 at #loc422))
#loc739 = loc(callsite(#loc144 at #loc422))
#loc740 = loc(callsite(#loc435 at #loc422))
#loc741 = loc(callsite(#loc436 at #loc422))
#loc742 = loc(callsite(#loc437 at #loc422))
#loc743 = loc(callsite(#loc438 at #loc422))
#loc744 = loc(callsite(#loc439 at #loc422))
#loc745 = loc(callsite(#loc152 at #loc422))
#loc746 = loc(callsite(#loc440 at #loc422))
#loc747 = loc(callsite(#loc442 at #loc422))
#loc748 = loc(callsite(#loc171 at #loc422))
#loc749 = loc(callsite(#loc172 at #loc422))
#loc750 = loc(callsite(#loc173 at #loc422))
#loc751 = loc(callsite(#loc174 at #loc422))
#loc752 = loc(callsite(#loc175 at #loc422))
#loc754 = loc(callsite(#loc448 at #loc422))
#loc755 = loc(callsite(#loc449 at #loc422))
#loc756 = loc(callsite(#loc450 at #loc422))
#loc757 = loc(callsite(#loc451 at #loc422))
#loc758 = loc(callsite(#loc452 at #loc422))
#loc759 = loc(callsite(#loc182 at #loc422))
#loc760 = loc(callsite(#loc453 at #loc118))
#loc761 = loc(callsite(#loc41 at #loc454))
#loc762 = loc(callsite(#loc339 at #loc454))
#loc763 = loc(callsite(#loc364 at #loc455))
#loc764 = loc(callsite(#loc366 at #loc455))
#loc765 = loc(callsite(#loc367 at #loc455))
#loc766 = loc(callsite(#loc368 at #loc455))
#loc767 = loc(callsite(#loc88 at #loc463))
#loc768 = loc(callsite(#loc406 at #loc463))
#loc769 = loc(callsite(#loc417 at #loc196))
#loc770 = loc(callsite(#loc88 at #loc468))
#loc771 = loc(callsite(#loc124 at #loc469))
#loc772 = loc(callsite(#loc424 at #loc469))
#loc774 = loc(callsite(#loc430 at #loc469))
#loc775 = loc(callsite(#loc431 at #loc469))
#loc776 = loc(callsite(#loc432 at #loc469))
#loc777 = loc(callsite(#loc433 at #loc469))
#loc778 = loc(callsite(#loc434 at #loc469))
#loc779 = loc(callsite(#loc141 at #loc469))
#loc780 = loc(callsite(#loc142 at #loc469))
#loc781 = loc(callsite(#loc143 at #loc469))
#loc782 = loc(callsite(#loc144 at #loc469))
#loc783 = loc(callsite(#loc435 at #loc469))
#loc784 = loc(callsite(#loc436 at #loc469))
#loc785 = loc(callsite(#loc437 at #loc469))
#loc786 = loc(callsite(#loc438 at #loc469))
#loc787 = loc(callsite(#loc439 at #loc469))
#loc788 = loc(callsite(#loc152 at #loc469))
#loc789 = loc(callsite(#loc440 at #loc469))
#loc790 = loc(callsite(#loc442 at #loc469))
#loc791 = loc(callsite(#loc171 at #loc469))
#loc792 = loc(callsite(#loc172 at #loc469))
#loc793 = loc(callsite(#loc173 at #loc469))
#loc794 = loc(callsite(#loc174 at #loc469))
#loc795 = loc(callsite(#loc175 at #loc469))
#loc797 = loc(callsite(#loc448 at #loc469))
#loc798 = loc(callsite(#loc449 at #loc469))
#loc799 = loc(callsite(#loc450 at #loc469))
#loc800 = loc(callsite(#loc451 at #loc469))
#loc801 = loc(callsite(#loc452 at #loc469))
#loc802 = loc(callsite(#loc182 at #loc469))
#loc803 = loc(callsite(#loc453 at #loc196))
#loc804 = loc(callsite(#loc41 at #loc470))
#loc805 = loc(callsite(#loc339 at #loc470))
#loc806 = loc(callsite(#loc364 at #loc471))
#loc807 = loc(callsite(#loc366 at #loc471))
#loc808 = loc(callsite(#loc367 at #loc471))
#loc809 = loc(callsite(#loc368 at #loc471))
#loc810 = loc(callsite(#loc88 at #loc479))
#loc811 = loc(callsite(#loc406 at #loc479))
#loc812 = loc(callsite(#loc323 at #loc482))
#loc813 = loc(callsite(#loc321 at #loc482))
#loc814 = loc(callsite(#loc324 at #loc482))
#loc815 = loc(callsite(#loc325 at #loc482))
#loc816 = loc("q_consumer"(#loc483))
#loc817 = loc(callsite(#loc342 at #loc485))
#loc818 = loc(callsite(#loc336 at #loc485))
#loc819 = loc(callsite(#loc338 at #loc485))
#loc820 = loc(callsite(#loc44 at #loc485))
#loc821 = loc(callsite(#loc339 at #loc200))
#loc822 = loc(callsite(#loc342 at #loc490))
#loc823 = loc(callsite(#loc336 at #loc490))
#loc824 = loc(callsite(#loc338 at #loc490))
#loc825 = loc(callsite(#loc44 at #loc490))
#loc826 = loc(callsite(#loc339 at #loc205))
#loc827 = loc(callsite(#loc376 at #loc491))
#loc828 = loc(callsite(#loc378 at #loc491))
#loc829 = loc(callsite(#loc379 at #loc491))
#loc830 = loc(callsite(#loc92 at #loc491))
#loc831 = loc(callsite(#loc406 at #loc206))
#loc832 = loc(callsite(#loc342 at #loc492))
#loc833 = loc(callsite(#loc336 at #loc492))
#loc834 = loc(callsite(#loc338 at #loc492))
#loc835 = loc(callsite(#loc44 at #loc492))
#loc836 = loc(callsite(#loc339 at #loc209))
#loc837 = loc(callsite(#loc376 at #loc493))
#loc838 = loc(callsite(#loc378 at #loc493))
#loc839 = loc(callsite(#loc379 at #loc493))
#loc840 = loc(callsite(#loc92 at #loc493))
#loc841 = loc(callsite(#loc406 at #loc210))
#loc842 = loc(callsite(#loc342 at #loc494))
#loc843 = loc(callsite(#loc336 at #loc494))
#loc844 = loc(callsite(#loc338 at #loc494))
#loc845 = loc(callsite(#loc44 at #loc494))
#loc846 = loc(callsite(#loc339 at #loc212))
#loc847 = loc(callsite(#loc376 at #loc495))
#loc848 = loc(callsite(#loc378 at #loc495))
#loc849 = loc(callsite(#loc379 at #loc495))
#loc850 = loc(callsite(#loc92 at #loc495))
#loc851 = loc(callsite(#loc406 at #loc213))
#loc852 = loc(callsite(#loc376 at #loc496))
#loc853 = loc(callsite(#loc378 at #loc496))
#loc854 = loc(callsite(#loc379 at #loc496))
#loc855 = loc(callsite(#loc92 at #loc496))
#loc856 = loc(callsite(#loc497 at #loc498))
#loc857 = loc(callsite(#loc153 at #loc498))
#loc858 = loc("kv_consumer"(#loc499))
#loc859 = loc(callsite(#loc342 at #loc500))
#loc860 = loc(callsite(#loc336 at #loc500))
#loc861 = loc(callsite(#loc338 at #loc500))
#loc862 = loc(callsite(#loc44 at #loc500))
#loc863 = loc(callsite(#loc339 at #loc220))
#loc864 = loc(callsite(#loc376 at #loc501))
#loc865 = loc(callsite(#loc378 at #loc501))
#loc866 = loc(callsite(#loc379 at #loc501))
#loc867 = loc(callsite(#loc92 at #loc501))
#loc868 = loc(callsite(#loc406 at #loc223))
#loc869 = loc(callsite(#loc376 at #loc502))
#loc870 = loc(callsite(#loc378 at #loc502))
#loc871 = loc(callsite(#loc379 at #loc502))
#loc872 = loc(callsite(#loc92 at #loc502))
#loc873 = loc(callsite(#loc406 at #loc224))
#loc874 = loc(callsite(#loc497 at #loc503))
#loc875 = loc(callsite(#loc153 at #loc503))
#loc876 = loc(callsite(#loc342 at #loc504))
#loc877 = loc(callsite(#loc336 at #loc504))
#loc878 = loc(callsite(#loc338 at #loc504))
#loc879 = loc(callsite(#loc44 at #loc504))
#loc880 = loc(callsite(#loc339 at #loc228))
#loc881 = loc(callsite(#loc376 at #loc505))
#loc882 = loc(callsite(#loc378 at #loc505))
#loc883 = loc(callsite(#loc379 at #loc505))
#loc884 = loc(callsite(#loc92 at #loc505))
#loc885 = loc(callsite(#loc406 at #loc229))
#loc886 = loc(callsite(#loc376 at #loc506))
#loc887 = loc(callsite(#loc378 at #loc506))
#loc888 = loc(callsite(#loc379 at #loc506))
#loc889 = loc(callsite(#loc92 at #loc506))
#loc890 = loc(callsite(#loc406 at #loc230))
#loc891 = loc(callsite(#loc497 at #loc507))
#loc892 = loc(callsite(#loc153 at #loc507))
#loc893 = loc(callsite(#loc376 at #loc508))
#loc894 = loc(callsite(#loc378 at #loc508))
#loc895 = loc(callsite(#loc379 at #loc508))
#loc896 = loc(callsite(#loc92 at #loc508))
#loc897 = loc(callsite(#loc406 at #loc236))
#loc898 = loc(callsite(#loc376 at #loc509))
#loc899 = loc(callsite(#loc378 at #loc509))
#loc900 = loc(callsite(#loc379 at #loc509))
#loc901 = loc(callsite(#loc92 at #loc509))
#loc902 = loc(callsite(#loc406 at #loc237))
#loc903 = loc(callsite(#loc497 at #loc510))
#loc904 = loc(callsite(#loc153 at #loc510))
#loc905 = loc(callsite(#loc323 at #loc511))
#loc906 = loc(callsite(#loc321 at #loc511))
#loc907 = loc(callsite(#loc324 at #loc511))
#loc908 = loc(callsite(#loc325 at #loc511))
#loc909 = loc("q_producer"(#loc512))
#loc910 = loc(callsite(#loc327 at #loc513))
#loc911 = loc(callsite(#loc329 at #loc513))
#loc912 = loc(callsite(#loc330 at #loc513))
#loc913 = loc(callsite(#loc331 at #loc513))
#loc914 = loc(callsite(#loc332 at #loc513))
#loc915 = loc(callsite(#loc333 at #loc513))
#loc916 = loc(callsite(#loc334 at #loc513))
#loc917 = loc(callsite(#loc245 at #loc513))
#loc918 = loc(callsite(#loc376 at #loc522))
#loc919 = loc(callsite(#loc378 at #loc522))
#loc920 = loc(callsite(#loc379 at #loc522))
#loc921 = loc(callsite(#loc92 at #loc522))
#loc922 = loc(callsite(#loc406 at #loc253))
#loc923 = loc(callsite(#loc376 at #loc525))
#loc924 = loc(callsite(#loc378 at #loc525))
#loc925 = loc(callsite(#loc379 at #loc525))
#loc926 = loc(callsite(#loc92 at #loc525))
#loc927 = loc(callsite(#loc406 at #loc257))
#loc928 = loc(callsite(#loc376 at #loc529))
#loc929 = loc(callsite(#loc378 at #loc529))
#loc930 = loc(callsite(#loc379 at #loc529))
#loc931 = loc(callsite(#loc92 at #loc529))
#loc932 = loc(callsite(#loc406 at #loc260))
#loc933 = loc(callsite(#loc376 at #loc532))
#loc934 = loc(callsite(#loc378 at #loc532))
#loc935 = loc(callsite(#loc379 at #loc532))
#loc936 = loc(callsite(#loc92 at #loc532))
#loc937 = loc(callsite(#loc406 at #loc262))
#loc938 = loc("kv_producer"(#loc535))
#loc939 = loc(callsite(#loc376 at #loc537))
#loc940 = loc(callsite(#loc378 at #loc537))
#loc941 = loc(callsite(#loc379 at #loc537))
#loc942 = loc(callsite(#loc92 at #loc537))
#loc943 = loc(callsite(#loc406 at #loc266))
#loc944 = loc(callsite(#loc376 at #loc540))
#loc945 = loc(callsite(#loc378 at #loc540))
#loc946 = loc(callsite(#loc379 at #loc540))
#loc947 = loc(callsite(#loc92 at #loc540))
#loc948 = loc(callsite(#loc406 at #loc268))
#loc949 = loc(callsite(#loc323 at #loc543))
#loc950 = loc(callsite(#loc321 at #loc543))
#loc951 = loc(callsite(#loc324 at #loc543))
#loc952 = loc(callsite(#loc325 at #loc543))
#loc953 = loc("epi_consumer"(#loc544))
#loc954 = loc(callsite(#loc327 at #loc545))
#loc955 = loc(callsite(#loc329 at #loc545))
#loc956 = loc(callsite(#loc330 at #loc545))
#loc957 = loc(callsite(#loc331 at #loc545))
#loc958 = loc(callsite(#loc332 at #loc545))
#loc959 = loc(callsite(#loc333 at #loc545))
#loc960 = loc(callsite(#loc334 at #loc545))
#loc961 = loc(callsite(#loc245 at #loc545))
#loc962 = loc(callsite(#loc342 at #loc546))
#loc963 = loc(callsite(#loc336 at #loc546))
#loc964 = loc(callsite(#loc338 at #loc546))
#loc965 = loc(callsite(#loc44 at #loc546))
#loc966 = loc(callsite(#loc339 at #loc275))
#loc967 = loc(callsite(#loc342 at #loc547))
#loc968 = loc(callsite(#loc336 at #loc547))
#loc969 = loc(callsite(#loc338 at #loc547))
#loc970 = loc(callsite(#loc44 at #loc547))
#loc971 = loc(callsite(#loc339 at #loc277))
#loc972 = loc(callsite(#loc307 at #loc572))
#loc973 = loc(callsite(#loc309 at #loc572))
#loc974 = loc(callsite(#loc310 at #loc572))
#loc975 = loc(callsite(#loc8 at #loc572))
#loc976 = loc(callsite(#loc9 at #loc572))
#loc977 = loc(callsite(#loc10 at #loc572))
#loc978 = loc(callsite(#loc11 at #loc572))
#loc979 = loc(callsite(#loc12 at #loc572))
#loc980 = loc(callsite(#loc307 at #loc573))
#loc981 = loc(callsite(#loc309 at #loc573))
#loc982 = loc(callsite(#loc310 at #loc573))
#loc983 = loc(callsite(#loc8 at #loc573))
#loc984 = loc(callsite(#loc9 at #loc573))
#loc985 = loc(callsite(#loc10 at #loc573))
#loc986 = loc(callsite(#loc11 at #loc573))
#loc987 = loc(callsite(#loc12 at #loc573))
#loc988 = loc(callsite(#loc25 at #loc631))
#loc989 = loc(callsite(#loc27 at #loc631))
#loc990 = loc("corr0_consumer"(#loc634))
#loc991 = loc(callsite(#loc45 at #loc645))
#loc992 = loc(callsite(#loc45 at #loc649))
#loc993 = loc("corr0_consumer"(#loc650))
#loc994 = loc(callsite(#loc342 at #loc651))
#loc995 = loc(callsite(#loc336 at #loc651))
#loc996 = loc(callsite(#loc338 at #loc651))
#loc997 = loc(callsite(#loc44 at #loc651))
#loc998 = loc(callsite(#loc336 at #loc652))
#loc999 = loc(callsite(#loc338 at #loc652))
#loc1000 = loc(callsite(#loc44 at #loc652))
#loc1001 = loc(callsite(#loc45 at #loc653))
#loc1002 = loc(callsite(#loc345 at #loc654))
#loc1003 = loc(callsite(#loc58 at #loc654))
#loc1004 = loc(callsite(#loc66 at #loc661))
#loc1005 = loc(callsite(#loc342 at #loc662))
#loc1006 = loc(callsite(#loc336 at #loc662))
#loc1007 = loc(callsite(#loc338 at #loc662))
#loc1008 = loc(callsite(#loc44 at #loc662))
#loc1009 = loc(callsite(#loc358 at #loc663))
#loc1010 = loc(callsite(#loc336 at #loc664))
#loc1011 = loc(callsite(#loc338 at #loc664))
#loc1012 = loc(callsite(#loc44 at #loc664))
#loc1013 = loc(callsite(#loc45 at #loc665))
#loc1014 = loc(callsite(#loc345 at #loc666))
#loc1015 = loc(callsite(#loc58 at #loc666))
#loc1016 = loc(callsite(#loc66 at #loc673))
#loc1017 = loc(callsite(#loc336 at #loc674))
#loc1018 = loc(callsite(#loc338 at #loc674))
#loc1019 = loc(callsite(#loc44 at #loc674))
#loc1020 = loc(callsite(#loc45 at #loc675))
#loc1021 = loc(callsite(#loc376 at #loc686))
#loc1022 = loc(callsite(#loc378 at #loc686))
#loc1023 = loc(callsite(#loc379 at #loc686))
#loc1024 = loc(callsite(#loc92 at #loc686))
#loc1025 = loc(callsite(#loc342 at #loc687))
#loc1026 = loc(callsite(#loc336 at #loc687))
#loc1027 = loc(callsite(#loc338 at #loc687))
#loc1028 = loc(callsite(#loc44 at #loc687))
#loc1029 = loc(callsite(#loc66 at #loc692))
#loc1030 = loc(callsite(#loc336 at #loc701))
#loc1031 = loc(callsite(#loc338 at #loc701))
#loc1032 = loc(callsite(#loc44 at #loc701))
#loc1033 = loc(callsite(#loc45 at #loc702))
#loc1034 = loc(callsite(#loc376 at #loc713))
#loc1035 = loc(callsite(#loc378 at #loc713))
#loc1036 = loc(callsite(#loc379 at #loc713))
#loc1037 = loc(callsite(#loc92 at #loc713))
#loc1038 = loc(callsite(#loc358 at #loc714))
#loc1039 = loc(callsite(#loc342 at #loc715))
#loc1040 = loc(callsite(#loc336 at #loc715))
#loc1041 = loc(callsite(#loc338 at #loc715))
#loc1042 = loc(callsite(#loc44 at #loc715))
#loc1043 = loc(callsite(#loc358 at #loc716))
#loc1044 = loc(callsite(#loc66 at #loc721))
#loc1045 = loc(callsite(#loc323 at #loc724))
#loc1046 = loc(callsite(#loc378 at #loc725))
#loc1047 = loc(callsite(#loc379 at #loc725))
#loc1048 = loc(callsite(#loc92 at #loc725))
#loc1049 = loc(callsite(#loc321 at #loc724))
#loc1050 = loc(callsite(#loc324 at #loc724))
#loc1051 = loc(callsite(#loc325 at #loc724))
#loc1052 = loc("exp_turnstile"(#loc726))
#loc1053 = loc("s_consumer"(#loc727))
#loc1054 = loc(callsite(#loc41 at #loc728))
#loc1055 = loc(callsite(#loc339 at #loc728))
#loc1056 = loc(callsite(#loc423 at #loc729))
#loc1057 = loc(callsite(#loc425 at #loc729))
#loc1058 = loc(callsite(#loc129 at #loc729))
#loc1059 = loc(callsite(#loc133 at #loc730))
#loc1061 = loc(callsite(#loc345 at #loc735))
#loc1062 = loc(callsite(#loc58 at #loc735))
#loc1063 = loc(callsite(#loc145 at #loc740))
#loc1064 = loc(callsite(#loc66 at #loc741))
#loc1065 = loc(callsite(#loc150 at #loc744))
#loc1066 = loc(callsite(#loc88 at #loc745))
#loc1067 = loc(callsite(#loc406 at #loc745))
#loc1068 = loc(callsite(#loc153 at #loc746))
#loc1069 = loc(callsite(#loc441 at #loc747))
#loc1070 = loc(callsite(#loc445 at #loc747))
#loc1071 = loc(callsite(#loc165 at #loc747))
#loc1072 = loc(callsite(#loc166 at #loc747))
#loc1073 = loc(callsite(#loc167 at #loc747))
#loc1074 = loc(callsite(#loc169 at #loc747))
#loc1075 = loc(callsite(#loc88 at #loc749))
#loc1076 = loc(callsite(#loc406 at #loc749))
#loc1077 = loc(callsite(#loc155 at #loc751))
#loc1078 = loc(callsite(#loc158 at #loc751))
#loc1079 = loc(callsite(#loc159 at #loc751))
#loc1080 = loc(callsite(#loc443 at #loc751))
#loc1081 = loc(callsite(#loc444 at #loc751))
#loc1082 = loc(callsite(#loc176 at #loc752))
#loc1083 = loc(callsite(#loc342 at #loc761))
#loc1084 = loc(callsite(#loc336 at #loc761))
#loc1085 = loc(callsite(#loc338 at #loc761))
#loc1086 = loc(callsite(#loc44 at #loc761))
#loc1087 = loc(callsite(#loc45 at #loc762))
#loc1088 = loc(callsite(#loc378 at #loc767))
#loc1089 = loc(callsite(#loc379 at #loc767))
#loc1090 = loc(callsite(#loc92 at #loc767))
#loc1091 = loc(callsite(#loc45 at #loc768))
#loc1092 = loc(callsite(#loc323 at #loc769))
#loc1093 = loc(callsite(#loc378 at #loc770))
#loc1094 = loc(callsite(#loc379 at #loc770))
#loc1095 = loc(callsite(#loc92 at #loc770))
#loc1096 = loc(callsite(#loc321 at #loc769))
#loc1097 = loc(callsite(#loc324 at #loc769))
#loc1098 = loc(callsite(#loc325 at #loc769))
#loc1099 = loc(callsite(#loc41 at #loc771))
#loc1100 = loc(callsite(#loc339 at #loc771))
#loc1101 = loc(callsite(#loc423 at #loc772))
#loc1102 = loc(callsite(#loc425 at #loc772))
#loc1103 = loc(callsite(#loc129 at #loc772))
#loc1104 = loc(callsite(#loc133 at #loc773))
#loc1106 = loc(callsite(#loc345 at #loc778))
#loc1107 = loc(callsite(#loc58 at #loc778))
#loc1108 = loc(callsite(#loc145 at #loc783))
#loc1109 = loc(callsite(#loc66 at #loc784))
#loc1110 = loc(callsite(#loc150 at #loc787))
#loc1111 = loc(callsite(#loc41 at #loc788))
#loc1112 = loc(callsite(#loc339 at #loc788))
#loc1113 = loc(callsite(#loc153 at #loc789))
#loc1114 = loc(callsite(#loc441 at #loc790))
#loc1115 = loc(callsite(#loc445 at #loc790))
#loc1116 = loc(callsite(#loc165 at #loc790))
#loc1117 = loc(callsite(#loc166 at #loc790))
#loc1118 = loc(callsite(#loc167 at #loc790))
#loc1119 = loc(callsite(#loc169 at #loc790))
#loc1120 = loc(callsite(#loc88 at #loc792))
#loc1121 = loc(callsite(#loc406 at #loc792))
#loc1122 = loc(callsite(#loc155 at #loc794))
#loc1123 = loc(callsite(#loc158 at #loc794))
#loc1124 = loc(callsite(#loc159 at #loc794))
#loc1125 = loc(callsite(#loc443 at #loc794))
#loc1126 = loc(callsite(#loc444 at #loc794))
#loc1127 = loc(callsite(#loc176 at #loc795))
#loc1128 = loc(callsite(#loc342 at #loc804))
#loc1129 = loc(callsite(#loc336 at #loc804))
#loc1130 = loc(callsite(#loc338 at #loc804))
#loc1131 = loc(callsite(#loc44 at #loc804))
#loc1132 = loc(callsite(#loc45 at #loc805))
#loc1133 = loc(callsite(#loc378 at #loc810))
#loc1134 = loc(callsite(#loc379 at #loc810))
#loc1135 = loc(callsite(#loc92 at #loc810))
#loc1136 = loc(callsite(#loc45 at #loc811))
#loc1137 = loc(callsite(#loc25 at #loc812))
#loc1138 = loc(callsite(#loc27 at #loc812))
#loc1139 = loc("q_consumer"(#loc816))
#loc1140 = loc(callsite(#loc486 at #loc821))
#loc1141 = loc(callsite(#loc487 at #loc821))
#loc1142 = loc(callsite(#loc488 at #loc821))
#loc1143 = loc(callsite(#loc358 at #loc821))
#loc1144 = loc(callsite(#loc489 at #loc821))
#loc1145 = loc(callsite(#loc486 at #loc826))
#loc1146 = loc(callsite(#loc487 at #loc826))
#loc1147 = loc(callsite(#loc488 at #loc826))
#loc1148 = loc(callsite(#loc358 at #loc826))
#loc1149 = loc(callsite(#loc489 at #loc826))
#loc1150 = loc(callsite(#loc45 at #loc831))
#loc1151 = loc(callsite(#loc486 at #loc836))
#loc1152 = loc(callsite(#loc487 at #loc836))
#loc1153 = loc(callsite(#loc488 at #loc836))
#loc1154 = loc(callsite(#loc358 at #loc836))
#loc1155 = loc(callsite(#loc489 at #loc836))
#loc1156 = loc(callsite(#loc45 at #loc841))
#loc1157 = loc(callsite(#loc486 at #loc846))
#loc1158 = loc(callsite(#loc487 at #loc846))
#loc1159 = loc(callsite(#loc488 at #loc846))
#loc1160 = loc(callsite(#loc358 at #loc846))
#loc1161 = loc(callsite(#loc489 at #loc846))
#loc1162 = loc(callsite(#loc486 at #loc851))
#loc1163 = loc(callsite(#loc487 at #loc851))
#loc1164 = loc(callsite(#loc488 at #loc851))
#loc1165 = loc(callsite(#loc358 at #loc851))
#loc1166 = loc(callsite(#loc489 at #loc851))
#loc1167 = loc("kv_consumer"(#loc858))
#loc1168 = loc(callsite(#loc486 at #loc863))
#loc1169 = loc(callsite(#loc487 at #loc863))
#loc1170 = loc(callsite(#loc488 at #loc863))
#loc1171 = loc(callsite(#loc358 at #loc863))
#loc1172 = loc(callsite(#loc489 at #loc863))
#loc1173 = loc(callsite(#loc486 at #loc868))
#loc1174 = loc(callsite(#loc487 at #loc868))
#loc1175 = loc(callsite(#loc488 at #loc868))
#loc1176 = loc(callsite(#loc358 at #loc868))
#loc1177 = loc(callsite(#loc489 at #loc868))
#loc1178 = loc(callsite(#loc45 at #loc873))
#loc1179 = loc(callsite(#loc486 at #loc880))
#loc1180 = loc(callsite(#loc487 at #loc880))
#loc1181 = loc(callsite(#loc488 at #loc880))
#loc1182 = loc(callsite(#loc358 at #loc880))
#loc1183 = loc(callsite(#loc489 at #loc880))
#loc1184 = loc(callsite(#loc486 at #loc885))
#loc1185 = loc(callsite(#loc487 at #loc885))
#loc1186 = loc(callsite(#loc488 at #loc885))
#loc1187 = loc(callsite(#loc358 at #loc885))
#loc1188 = loc(callsite(#loc489 at #loc885))
#loc1189 = loc(callsite(#loc45 at #loc890))
#loc1190 = loc(callsite(#loc486 at #loc897))
#loc1191 = loc(callsite(#loc487 at #loc897))
#loc1192 = loc(callsite(#loc488 at #loc897))
#loc1193 = loc(callsite(#loc358 at #loc897))
#loc1194 = loc(callsite(#loc489 at #loc897))
#loc1195 = loc(callsite(#loc45 at #loc902))
#loc1196 = loc(callsite(#loc25 at #loc905))
#loc1197 = loc(callsite(#loc27 at #loc905))
#loc1198 = loc("q_producer"(#loc909))
#loc1199 = loc(callsite(#loc514 at #loc917))
#loc1200 = loc(callsite(#loc515 at #loc917))
#loc1201 = loc(callsite(#loc516 at #loc917))
#loc1202 = loc(callsite(#loc517 at #loc917))
#loc1203 = loc(callsite(#loc518 at #loc917))
#loc1204 = loc(callsite(#loc519 at #loc917))
#loc1205 = loc(callsite(#loc520 at #loc917))
#loc1206 = loc(callsite(#loc521 at #loc917))
#loc1207 = loc(callsite(#loc486 at #loc922))
#loc1208 = loc(callsite(#loc487 at #loc922))
#loc1209 = loc(callsite(#loc488 at #loc922))
#loc1210 = loc(callsite(#loc358 at #loc922))
#loc1211 = loc(callsite(#loc489 at #loc922))
#loc1212 = loc(callsite(#loc486 at #loc927))
#loc1213 = loc(callsite(#loc487 at #loc927))
#loc1214 = loc(callsite(#loc488 at #loc927))
#loc1215 = loc(callsite(#loc358 at #loc927))
#loc1216 = loc(callsite(#loc489 at #loc927))
#loc1217 = loc(callsite(#loc486 at #loc932))
#loc1218 = loc(callsite(#loc487 at #loc932))
#loc1219 = loc(callsite(#loc488 at #loc932))
#loc1220 = loc(callsite(#loc358 at #loc932))
#loc1221 = loc(callsite(#loc489 at #loc932))
#loc1222 = loc(callsite(#loc486 at #loc937))
#loc1223 = loc(callsite(#loc487 at #loc937))
#loc1224 = loc(callsite(#loc488 at #loc937))
#loc1225 = loc(callsite(#loc358 at #loc937))
#loc1226 = loc(callsite(#loc489 at #loc937))
#loc1227 = loc("kv_producer"(#loc938))
#loc1228 = loc(callsite(#loc486 at #loc943))
#loc1229 = loc(callsite(#loc487 at #loc943))
#loc1230 = loc(callsite(#loc488 at #loc943))
#loc1231 = loc(callsite(#loc358 at #loc943))
#loc1232 = loc(callsite(#loc489 at #loc943))
#loc1233 = loc(callsite(#loc486 at #loc948))
#loc1234 = loc(callsite(#loc487 at #loc948))
#loc1235 = loc(callsite(#loc488 at #loc948))
#loc1236 = loc(callsite(#loc358 at #loc948))
#loc1237 = loc(callsite(#loc489 at #loc948))
#loc1238 = loc(callsite(#loc25 at #loc949))
#loc1239 = loc(callsite(#loc27 at #loc949))
#loc1240 = loc("epi_consumer"(#loc953))
#loc1241 = loc(callsite(#loc514 at #loc961))
#loc1242 = loc(callsite(#loc515 at #loc961))
#loc1243 = loc(callsite(#loc516 at #loc961))
#loc1244 = loc(callsite(#loc517 at #loc961))
#loc1245 = loc(callsite(#loc518 at #loc961))
#loc1246 = loc(callsite(#loc519 at #loc961))
#loc1247 = loc(callsite(#loc520 at #loc961))
#loc1248 = loc(callsite(#loc521 at #loc961))
#loc1249 = loc(callsite(#loc486 at #loc966))
#loc1250 = loc(callsite(#loc487 at #loc966))
#loc1251 = loc(callsite(#loc488 at #loc966))
#loc1252 = loc(callsite(#loc358 at #loc966))
#loc1253 = loc(callsite(#loc489 at #loc966))
#loc1254 = loc(callsite(#loc486 at #loc971))
#loc1255 = loc(callsite(#loc487 at #loc971))
#loc1256 = loc(callsite(#loc488 at #loc971))
#loc1257 = loc(callsite(#loc358 at #loc971))
#loc1258 = loc(callsite(#loc489 at #loc971))
#loc1259 = loc("corr0_consumer"(#loc990))
#loc1260 = loc("corr0_consumer"(#loc993))
#loc1261 = loc(callsite(#loc25 at #loc1045))
#loc1262 = loc(callsite(#loc27 at #loc1045))
#loc1263 = loc("exp_turnstile"(#loc1052))
#loc1264 = loc("s_consumer"(#loc1053))
#loc1265 = loc(callsite(#loc342 at #loc1054))
#loc1266 = loc(callsite(#loc336 at #loc1054))
#loc1267 = loc(callsite(#loc338 at #loc1054))
#loc1268 = loc(callsite(#loc44 at #loc1054))
#loc1269 = loc(callsite(#loc45 at #loc1055))
#loc1270 = loc(callsite(#loc426 at #loc1058))
#loc1271 = loc(callsite(#loc427 at #loc1058))
#loc1272 = loc(callsite(#loc428 at #loc1058))
#loc1273 = loc(callsite(#loc132 at #loc1058))
#loc1274 = loc(callsite(#loc135 at #loc1059))
#loc1275 = loc(callsite(#loc378 at #loc1066))
#loc1276 = loc(callsite(#loc379 at #loc1066))
#loc1277 = loc(callsite(#loc92 at #loc1066))
#loc1278 = loc(callsite(#loc45 at #loc1067))
#loc1279 = loc(callsite(#loc155 at #loc1069))
#loc1280 = loc(callsite(#loc158 at #loc1069))
#loc1281 = loc(callsite(#loc159 at #loc1069))
#loc1282 = loc(callsite(#loc443 at #loc1069))
#loc1283 = loc(callsite(#loc444 at #loc1069))
#loc1284 = loc(callsite(#loc162 at #loc1069))
#loc1285 = loc(callsite(#loc163 at #loc1069))
#loc1286 = loc(callsite(#loc446 at #loc1074))
#loc1287 = loc(callsite(#loc447 at #loc1074))
#loc1288 = loc(callsite(#loc426 at #loc1074))
#loc1289 = loc(callsite(#loc427 at #loc1074))
#loc1290 = loc(callsite(#loc428 at #loc1074))
#loc1291 = loc(callsite(#loc132 at #loc1074))
#loc1292 = loc(callsite(#loc378 at #loc1075))
#loc1293 = loc(callsite(#loc379 at #loc1075))
#loc1294 = loc(callsite(#loc92 at #loc1075))
#loc1295 = loc(callsite(#loc45 at #loc1076))
#loc1296 = loc(callsite(#loc25 at #loc1092))
#loc1297 = loc(callsite(#loc27 at #loc1092))
#loc1298 = loc(callsite(#loc342 at #loc1099))
#loc1299 = loc(callsite(#loc336 at #loc1099))
#loc1300 = loc(callsite(#loc338 at #loc1099))
#loc1301 = loc(callsite(#loc44 at #loc1099))
#loc1302 = loc(callsite(#loc45 at #loc1100))
#loc1303 = loc(callsite(#loc426 at #loc1103))
#loc1304 = loc(callsite(#loc427 at #loc1103))
#loc1305 = loc(callsite(#loc428 at #loc1103))
#loc1306 = loc(callsite(#loc132 at #loc1103))
#loc1307 = loc(callsite(#loc135 at #loc1104))
#loc1308 = loc(callsite(#loc336 at #loc1111))
#loc1309 = loc(callsite(#loc338 at #loc1111))
#loc1310 = loc(callsite(#loc44 at #loc1111))
#loc1311 = loc(callsite(#loc45 at #loc1112))
#loc1312 = loc(callsite(#loc155 at #loc1114))
#loc1313 = loc(callsite(#loc158 at #loc1114))
#loc1314 = loc(callsite(#loc159 at #loc1114))
#loc1315 = loc(callsite(#loc443 at #loc1114))
#loc1316 = loc(callsite(#loc444 at #loc1114))
#loc1317 = loc(callsite(#loc162 at #loc1114))
#loc1318 = loc(callsite(#loc163 at #loc1114))
#loc1319 = loc(callsite(#loc446 at #loc1119))
#loc1320 = loc(callsite(#loc447 at #loc1119))
#loc1321 = loc(callsite(#loc426 at #loc1119))
#loc1322 = loc(callsite(#loc427 at #loc1119))
#loc1323 = loc(callsite(#loc428 at #loc1119))
#loc1324 = loc(callsite(#loc132 at #loc1119))
#loc1325 = loc(callsite(#loc378 at #loc1120))
#loc1326 = loc(callsite(#loc379 at #loc1120))
#loc1327 = loc(callsite(#loc92 at #loc1120))
#loc1328 = loc(callsite(#loc45 at #loc1121))
#loc1329 = loc("q_consumer"(#loc1139))
#loc1330 = loc("kv_consumer"(#loc1167))
#loc1331 = loc("q_producer"(#loc1198))
#loc1332 = loc("kv_producer"(#loc1227))
#loc1333 = loc("epi_consumer"(#loc1240))
#loc1334 = loc("corr0_consumer"(#loc1259))
#loc1335 = loc("corr0_consumer"(#loc1260))
#loc1336 = loc("exp_turnstile"(#loc1263))
#loc1337 = loc("s_consumer"(#loc1264))
#loc1338 = loc(callsite(#loc155 at #loc1284))
#loc1339 = loc(callsite(#loc158 at #loc1284))
#loc1340 = loc(callsite(#loc159 at #loc1284))
#loc1341 = loc(callsite(#loc443 at #loc1284))
#loc1342 = loc(callsite(#loc444 at #loc1284))
#loc1343 = loc(callsite(#loc155 at #loc1285))
#loc1344 = loc(callsite(#loc158 at #loc1285))
#loc1345 = loc(callsite(#loc159 at #loc1285))
#loc1346 = loc(callsite(#loc443 at #loc1285))
#loc1347 = loc(callsite(#loc444 at #loc1285))
#loc1348 = loc(callsite(#loc426 at #loc1286))
#loc1349 = loc(callsite(#loc427 at #loc1286))
#loc1350 = loc(callsite(#loc428 at #loc1286))
#loc1351 = loc(callsite(#loc132 at #loc1286))
#loc1352 = loc(callsite(#loc426 at #loc1287))
#loc1353 = loc(callsite(#loc427 at #loc1287))
#loc1354 = loc(callsite(#loc428 at #loc1287))
#loc1355 = loc(callsite(#loc132 at #loc1287))
#loc1356 = loc(callsite(#loc155 at #loc1317))
#loc1357 = loc(callsite(#loc158 at #loc1317))
#loc1358 = loc(callsite(#loc159 at #loc1317))
#loc1359 = loc(callsite(#loc443 at #loc1317))
#loc1360 = loc(callsite(#loc444 at #loc1317))
#loc1361 = loc(callsite(#loc155 at #loc1318))
#loc1362 = loc(callsite(#loc158 at #loc1318))
#loc1363 = loc(callsite(#loc159 at #loc1318))
#loc1364 = loc(callsite(#loc443 at #loc1318))
#loc1365 = loc(callsite(#loc444 at #loc1318))
#loc1366 = loc(callsite(#loc426 at #loc1319))
#loc1367 = loc(callsite(#loc427 at #loc1319))
#loc1368 = loc(callsite(#loc428 at #loc1319))
#loc1369 = loc(callsite(#loc132 at #loc1319))
#loc1370 = loc(callsite(#loc426 at #loc1320))
#loc1371 = loc(callsite(#loc427 at #loc1320))
#loc1372 = loc(callsite(#loc428 at #loc1320))
#loc1373 = loc(callsite(#loc132 at #loc1320))
#loc1374 = loc("q_consumer"(#loc1329))
#loc1375 = loc("kv_consumer"(#loc1330))
#loc1376 = loc("q_producer"(#loc1331))
#loc1377 = loc("kv_producer"(#loc1332))
#loc1378 = loc("epi_consumer"(#loc1333))
#loc1379 = loc("corr1_consumer"(#loc1334))
#loc1380 = loc("corr1_consumer"(#loc1335))
#loc1381 = loc("s_consumer"(#loc1336))
#loc1382 = loc("corr_producer"(#loc1337))
#loc1383 = loc("kv_consumer"(#loc1374))
#loc1384 = loc("o_producer"(#loc1375))
#loc1385 = loc("kv_producer"(#loc1376))
#loc1386 = loc("offsetkv_y"(#loc1377))
#loc1387 = loc("corr1_consumer"(#loc1379))
#loc1388 = loc("corr1_consumer"(#loc1380))
#loc1389 = loc("s_consumer"(#loc1381))
#loc1390 = loc("corr_producer"(#loc1382))
#loc1391 = loc("kv_consumer"(#loc1383))
#loc1392 = loc("o_producer"(#loc1384))
#loc1393 = loc("kv_producer"(#loc1385))
#loc1394 = loc("k_smem"(#loc1386))
#loc1395 = loc("corr1_consumer"(#loc1387))
#loc1396 = loc("corr1_consumer"(#loc1388))
#loc1397 = loc("s_consumer"(#loc1389))
#loc1398 = loc("corr_producer"(#loc1390))
#loc1399 = loc("kv_consumer"(#loc1391))
#loc1400 = loc("o_producer"(#loc1392))
#loc1401 = loc("kv_producer"(#loc1393))
#loc1402 = loc("k_bar"(#loc1394))
#loc1403 = loc("corr1_consumer"(#loc1395))
#loc1404 = loc("corr1_consumer"(#loc1396))
#loc1405 = loc("s_consumer"(#loc1397))
#loc1406 = loc("corr_producer"(#loc1398))
#loc1407 = loc("kv_consumer"(#loc1399))
#loc1408 = loc("o_producer"(#loc1400))
#loc1409 = loc("kv_producer"(#loc1401))
#loc1410 = loc("v_smem"(#loc1402))
#loc1411 = loc("corr1_consumer"(#loc1403))
#loc1412 = loc("corr1_consumer"(#loc1404))
#loc1413 = loc("s_consumer"(#loc1405))
#loc1414 = loc("corr_producer"(#loc1406))
#loc1415 = loc("kv_consumer"(#loc1407))
#loc1416 = loc("o_producer"(#loc1408))
#loc1417 = loc("kv_producer"(#loc1409))
#loc1418 = loc("v_bar"(#loc1410))
#loc1419 = loc("o_consumer"(#loc1411))
#loc1420 = loc("o_consumer"(#loc1412))
#loc1421 = loc("corr_producer"(#loc1413))
#loc1422 = loc("exp_turnstile"(#loc1414))
#loc1423 = loc("o_producer"(#loc1415))
#loc1424 = loc("s0_producer"(#loc1416))
#loc1425 = loc("o_consumer"(#loc1419))
#loc1426 = loc("o_consumer"(#loc1420))
#loc1427 = loc("corr_producer"(#loc1421))
#loc1428 = loc("exp_turnstile"(#loc1422))
#loc1429 = loc("o_producer"(#loc1423))
#loc1430 = loc("s0_producer"(#loc1424))
#loc1431 = loc("o_consumer"(#loc1425))
#loc1432 = loc("o_consumer"(#loc1426))
#loc1433 = loc("corr_producer"(#loc1427))
#loc1434 = loc("exp_turnstile"(#loc1428))
#loc1435 = loc("o_producer"(#loc1429))
#loc1436 = loc("s0_producer"(#loc1430))
#loc1437 = loc("o_consumer"(#loc1431))
#loc1438 = loc("o_consumer"(#loc1432))
#loc1439 = loc("corr_producer"(#loc1433))
#loc1440 = loc("exp_turnstile"(#loc1434))
#loc1441 = loc("o_producer"(#loc1435))
#loc1442 = loc("s0_producer"(#loc1436))
#loc1443 = loc("o_consumer"(#loc1437))
#loc1444 = loc("o_consumer"(#loc1438))
#loc1445 = loc("corr_producer"(#loc1439))
#loc1446 = loc("exp_turnstile"(#loc1440))
#loc1447 = loc("o_producer"(#loc1441))
#loc1448 = loc("s0_producer"(#loc1442))
#loc1449 = loc("epi_producer"(#loc1443))
#loc1450 = loc("_"(#loc1445))
#loc1451 = loc("corr_bar"(#loc1446))
#loc1452 = loc("s0_producer"(#loc1447))
#loc1453 = loc("s1_producer"(#loc1448))
#loc1454 = loc("epi_producer"(#loc1449))
#loc1455 = loc("corr_bar"(#loc1450))
#loc1456 = loc("m_i"(#loc1451))
#loc1457 = loc("s0_producer"(#loc1452))
#loc1458 = loc("s1_producer"(#loc1453))
#loc1459 = loc("epi_producer"(#loc1454))
#loc1460 = loc(callsite(#loc1455 at #loc118))
#loc1461 = loc("l_i0"(#loc1456))
#loc1462 = loc(callsite(#loc1455 at #loc196))
#loc1463 = loc("s0_producer"(#loc1457))
#loc1464 = loc("s1_producer"(#loc1458))
#loc1465 = loc("epi_producer"(#loc1459))
#loc1466 = loc("l_i1"(#loc1461))
#loc1467 = loc("s0_producer"(#loc1463))
#loc1468 = loc("s1_producer"(#loc1464))
#loc1469 = loc("epi_producer"(#loc1465))
#loc1470 = loc(callsite(#loc1466 at #loc422))
#loc1471 = loc(callsite(#loc1466 at #loc469))
#loc1472 = loc("s0_producer"(#loc1467))
#loc1473 = loc("s1_producer"(#loc1468))
#loc1474 = loc("s1_producer"(#loc1472))
#loc1475 = loc("k_smem"(#loc1473))
#loc1476 = loc("s1_producer"(#loc1474))
#loc1477 = loc("k_bar"(#loc1475))
#loc1478 = loc("s1_producer"(#loc1476))
#loc1479 = loc("s0_tmem"(#loc1477))
#loc1480 = loc("s1_producer"(#loc1478))
#loc1481 = loc("s0_bar"(#loc1479))
#loc1482 = loc("s1_producer"(#loc1480))
#loc1483 = loc("s1_tmem"(#loc1481))
#loc1484 = loc("s1_bar"(#loc1483))
#loc1485 = loc("v_smem"(#loc1484))
#loc1486 = loc("v_bar"(#loc1485))
#loc1487 = loc("o0_tmem"(#loc1486))
#loc1488 = loc("o0_bar"(#loc1487))
#loc1489 = loc("p0_tmem"(#loc1488))
#loc1490 = loc("o1_init"(#loc1489))
